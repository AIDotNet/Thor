// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Thor.Provider;

#nullable disable

namespace Thor.Provider.PostgreSql.Thor
{
    [DbContext(typeof(PostgreSQLThorContext))]
    [Migration("20250715051544_CalculatePricing")]
    partial class CalculatePricing
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Thor.Domain.Chats.ChatChannel", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("ControlAutomatically")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Creator")
                        .HasColumnType("text");

                    b.Property<bool>("Disable")
                        .HasColumnType("boolean");

                    b.Property<string>("Extension")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Groups")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Models")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Modifier")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<string>("Other")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Quota")
                        .HasColumnType("integer");

                    b.Property<long>("RemainQuota")
                        .HasColumnType("bigint");

                    b.Property<long?>("ResponseTime")
                        .HasColumnType("bigint");

                    b.Property<bool>("SupportsResponses")
                        .HasColumnType("boolean");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("Creator");

                    b.HasIndex("Name");

                    b.ToTable("Channels");
                });

            modelBuilder.Entity("Thor.Domain.Chats.Token", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<DateTime?>("AccessedTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Creator")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("Disabled")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ExpiredTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Groups")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("boolean");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(42)
                        .HasColumnType("character varying(42)");

                    b.Property<string>("LimitModels")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Modifier")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("RemainQuota")
                        .HasColumnType("bigint");

                    b.Property<bool>("UnlimitedExpired")
                        .HasColumnType("boolean");

                    b.Property<bool>("UnlimitedQuota")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("UsedQuota")
                        .HasColumnType("bigint");

                    b.Property<string>("WhiteIpList")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Creator");

                    b.HasIndex("Key");

                    b.ToTable("Tokens");

                    b.HasData(
                        new
                        {
                            Id = "CA378C74-19E7-458A-918B-4DBB7AE1729D",
                            CreatedAt = new DateTime(2025, 7, 15, 13, 15, 43, 363, DateTimeKind.Local).AddTicks(5687),
                            Creator = "CA378C74-19E7-458A-918B-4DBB7AE1729D",
                            Disabled = false,
                            Groups = "[\"default\"]",
                            IsDelete = false,
                            Key = "sk-nIHglI8DQMo8AeVuozU7ICTHKvRnR9WDTrM1qX",
                            LimitModels = "[]",
                            Name = "默认Token",
                            RemainQuota = 0L,
                            UnlimitedExpired = true,
                            UnlimitedQuota = true,
                            UsedQuota = 0L,
                            WhiteIpList = "[]"
                        });
                });

            modelBuilder.Entity("Thor.Domain.Users.UserGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Creator")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Enable")
                        .HasColumnType("boolean");

                    b.Property<string>("Modifier")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<double>("Rate")
                        .HasColumnType("double precision");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("Creator");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("UserGroups", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("ca378c74-19e7-458a-918b-4dbb7ae1729d"),
                            Code = "default",
                            CreatedAt = new DateTime(2025, 7, 15, 13, 15, 43, 364, DateTimeKind.Local).AddTicks(5772),
                            Description = "默认用户组",
                            Enable = true,
                            Name = "默认",
                            Order = 0,
                            Rate = 1.0
                        },
                        new
                        {
                            Id = new Guid("ca378c74-19e7-458a-918b-4dbb7ae17291"),
                            Code = "vip",
                            CreatedAt = new DateTime(2025, 7, 15, 13, 15, 43, 364, DateTimeKind.Local).AddTicks(6228),
                            Description = "VIP用户组",
                            Enable = true,
                            Name = "VIP",
                            Order = 0,
                            Rate = 1.0
                        });
                });

            modelBuilder.Entity("Thor.Service.Domain.Announcement", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Creator")
                        .HasColumnType("text");

                    b.Property<bool>("Enabled")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ExpireTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Modifier")
                        .HasColumnType("text");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<bool>("Pinned")
                        .HasColumnType("boolean");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("Announcements");
                });

            modelBuilder.Entity("Thor.Service.Domain.ModelManager", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal?>("AudioCacheRate")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("AudioOutputRate")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("AudioPromptRate")
                        .HasColumnType("numeric");

                    b.Property<bool>("Available")
                        .HasColumnType("boolean");

                    b.Property<decimal?>("CacheHitRate")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("CacheRate")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("CompletionRate")
                        .HasColumnType("numeric");

                    b.Property<string>("ContextPricingTiers")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("ContextPricingTiers");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Creator")
                        .HasColumnType("text");

                    b.Property<int>("DefaultContextLength")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Enable")
                        .HasColumnType("boolean");

                    b.Property<string>("Extension")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Icon")
                        .HasColumnType("text");

                    b.Property<bool>("IsVersion2")
                        .HasColumnType("boolean");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Modifier")
                        .HasColumnType("text");

                    b.Property<decimal>("PromptRate")
                        .HasColumnType("numeric");

                    b.Property<string>("QuotaMax")
                        .HasColumnType("text");

                    b.Property<int>("QuotaType")
                        .HasColumnType("integer");

                    b.Property<string>("Tags")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("Creator");

                    b.HasIndex("Model");

                    b.ToTable("ModelManagers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("918ab058-8ebb-42b4-810d-6c2e84db2e98"),
                            Available = true,
                            ContextPricingTiers = "[]",
                            CreatedAt = new DateTime(2025, 7, 15, 13, 15, 43, 404, DateTimeKind.Local).AddTicks(1263),
                            DefaultContextLength = 4096,
                            Description = "GPT-3.5 Turbo 文本模型",
                            Enable = true,
                            Extension = "{}",
                            Icon = "OpenAI",
                            IsVersion2 = false,
                            Model = "gpt-3.5-turbo",
                            PromptRate = 0.75m,
                            QuotaMax = "128K",
                            QuotaType = 1,
                            Tags = "[\"\\u6587\\u672C\"]",
                            Type = "chat"
                        },
                        new
                        {
                            Id = new Guid("204b61ca-d4f0-407d-b20d-ea3157cabe58"),
                            Available = true,
                            ContextPricingTiers = "[]",
                            CreatedAt = new DateTime(2025, 7, 15, 13, 15, 43, 404, DateTimeKind.Local).AddTicks(1536),
                            DefaultContextLength = 4096,
                            Description = "GPT-3.5 Turbo 0125 文本模型",
                            Enable = true,
                            Extension = "{}",
                            Icon = "OpenAI",
                            IsVersion2 = false,
                            Model = "gpt-3.5-turbo-0125",
                            PromptRate = 0.25m,
                            QuotaMax = "128K",
                            QuotaType = 1,
                            Tags = "[\"\\u6587\\u672C\"]",
                            Type = "chat"
                        },
                        new
                        {
                            Id = new Guid("ac443fa6-fbed-4d7e-b8b3-fa8ffa3ec7ad"),
                            Available = true,
                            ContextPricingTiers = "[]",
                            CreatedAt = new DateTime(2025, 7, 15, 13, 15, 43, 404, DateTimeKind.Local).AddTicks(1538),
                            DefaultContextLength = 4096,
                            Description = "GPT-3.5 Turbo 0301 文本模型",
                            Enable = true,
                            Extension = "{}",
                            Icon = "OpenAI",
                            IsVersion2 = false,
                            Model = "gpt-3.5-turbo-0301",
                            PromptRate = 0.75m,
                            QuotaMax = "128K",
                            QuotaType = 1,
                            Tags = "[\"\\u6587\\u672C\"]",
                            Type = "chat"
                        },
                        new
                        {
                            Id = new Guid("370446cf-92d1-4ad6-8c7b-06e61bfffc98"),
                            Available = true,
                            ContextPricingTiers = "[]",
                            CreatedAt = new DateTime(2025, 7, 15, 13, 15, 43, 404, DateTimeKind.Local).AddTicks(1540),
                            DefaultContextLength = 4096,
                            Description = "GPT-3.5 Turbo 0613 文本模型",
                            Enable = true,
                            Extension = "{}",
                            Icon = "OpenAI",
                            IsVersion2 = false,
                            Model = "gpt-3.5-turbo-0613",
                            PromptRate = 0.75m,
                            QuotaMax = "128K",
                            QuotaType = 1,
                            Tags = "[\"\\u6587\\u672C\"]",
                            Type = "chat"
                        },
                        new
                        {
                            Id = new Guid("23ab8a9f-be29-4f02-a67b-a8e76912fd71"),
                            Available = true,
                            ContextPricingTiers = "[]",
                            CreatedAt = new DateTime(2025, 7, 15, 13, 15, 43, 404, DateTimeKind.Local).AddTicks(1542),
                            DefaultContextLength = 4096,
                            Description = "GPT-3.5 Turbo 1106 文本模型",
                            Enable = true,
                            Extension = "{}",
                            Icon = "OpenAI",
                            IsVersion2 = false,
                            Model = "gpt-3.5-turbo-1106",
                            PromptRate = 0.25m,
                            QuotaMax = "128K",
                            QuotaType = 1,
                            Tags = "[\"\\u6587\\u672C\"]",
                            Type = "chat"
                        },
                        new
                        {
                            Id = new Guid("8ccefa20-5e71-4e6a-a9e9-70ee5f96d277"),
                            Available = true,
                            ContextPricingTiers = "[]",
                            CreatedAt = new DateTime(2025, 7, 15, 13, 15, 43, 404, DateTimeKind.Local).AddTicks(1543),
                            DefaultContextLength = 4096,
                            Description = "GPT-3.5 Turbo 16k 文本模型",
                            Enable = true,
                            Extension = "{}",
                            Icon = "OpenAI",
                            IsVersion2 = false,
                            Model = "gpt-3.5-turbo-16k",
                            PromptRate = 0.75m,
                            QuotaMax = "16K",
                            QuotaType = 1,
                            Tags = "[\"\\u6587\\u672C\"]",
                            Type = "chat"
                        },
                        new
                        {
                            Id = new Guid("fef6abb5-73e3-4d76-acc7-08e82dc5680a"),
                            Available = true,
                            ContextPricingTiers = "[]",
                            CreatedAt = new DateTime(2025, 7, 15, 13, 15, 43, 404, DateTimeKind.Local).AddTicks(1553),
                            DefaultContextLength = 4096,
                            Description = "GPT-3.5 Turbo 16k 0613 文本模型",
                            Enable = true,
                            Extension = "{}",
                            Icon = "OpenAI",
                            IsVersion2 = false,
                            Model = "gpt-3.5-turbo-16k-0613",
                            PromptRate = 0.75m,
                            QuotaMax = "16K",
                            QuotaType = 1,
                            Tags = "[\"\\u6587\\u672C\"]",
                            Type = "chat"
                        },
                        new
                        {
                            Id = new Guid("8e6f2be6-92b6-4320-9d3d-5b343354ef78"),
                            Available = true,
                            ContextPricingTiers = "[]",
                            CreatedAt = new DateTime(2025, 7, 15, 13, 15, 43, 404, DateTimeKind.Local).AddTicks(1554),
                            DefaultContextLength = 4096,
                            Description = "GPT-3.5 Turbo Instruct 文本模型",
                            Enable = true,
                            Extension = "{}",
                            Icon = "OpenAI",
                            IsVersion2 = false,
                            Model = "gpt-3.5-turbo-instruct",
                            PromptRate = 0.001m,
                            QuotaMax = "128K",
                            QuotaType = 1,
                            Tags = "[\"\\u6587\\u672C\"]",
                            Type = "chat"
                        },
                        new
                        {
                            Id = new Guid("6cdc68cc-bdf1-45b8-bf06-c97409ff48e1"),
                            Available = true,
                            ContextPricingTiers = "[]",
                            CreatedAt = new DateTime(2025, 7, 15, 13, 15, 43, 404, DateTimeKind.Local).AddTicks(1556),
                            DefaultContextLength = 4096,
                            Description = "GPT-4 文本模型",
                            Enable = true,
                            Extension = "{}",
                            Icon = "OpenAI",
                            IsVersion2 = false,
                            Model = "gpt-4",
                            PromptRate = 15m,
                            QuotaMax = "128K",
                            QuotaType = 1,
                            Tags = "[\"\\u6587\\u672C\"]",
                            Type = "chat"
                        },
                        new
                        {
                            Id = new Guid("580c0563-f6a3-43e4-947c-0acf5bca30a1"),
                            Available = true,
                            ContextPricingTiers = "[]",
                            CreatedAt = new DateTime(2025, 7, 15, 13, 15, 43, 404, DateTimeKind.Local).AddTicks(1557),
                            DefaultContextLength = 4096,
                            Description = "GPT-4 0125 预览文本模型",
                            Enable = true,
                            Extension = "{}",
                            Icon = "OpenAI",
                            IsVersion2 = false,
                            Model = "gpt-4-0125-preview",
                            PromptRate = 5m,
                            QuotaMax = "128K",
                            QuotaType = 1,
                            Tags = "[\"\\u6587\\u672C\"]",
                            Type = "chat"
                        },
                        new
                        {
                            Id = new Guid("200bfbf7-3ca3-45c9-8f78-fe396610e650"),
                            Available = true,
                            ContextPricingTiers = "[]",
                            CreatedAt = new DateTime(2025, 7, 15, 13, 15, 43, 404, DateTimeKind.Local).AddTicks(1558),
                            DefaultContextLength = 4096,
                            Description = "GPT-4 0314 文本模型",
                            Enable = true,
                            Extension = "{}",
                            Icon = "OpenAI",
                            IsVersion2 = false,
                            Model = "gpt-4-0314",
                            PromptRate = 15m,
                            QuotaMax = "128K",
                            QuotaType = 1,
                            Tags = "[\"\\u6587\\u672C\"]",
                            Type = "chat"
                        },
                        new
                        {
                            Id = new Guid("4115033e-aab3-43a2-b41d-b2910cf8c32e"),
                            Available = true,
                            ContextPricingTiers = "[]",
                            CreatedAt = new DateTime(2025, 7, 15, 13, 15, 43, 404, DateTimeKind.Local).AddTicks(1559),
                            DefaultContextLength = 4096,
                            Description = "GPT-4 0613 文本模型",
                            Enable = true,
                            Extension = "{}",
                            Icon = "OpenAI",
                            IsVersion2 = false,
                            Model = "gpt-4-0613",
                            PromptRate = 15m,
                            QuotaMax = "128K",
                            QuotaType = 1,
                            Tags = "[\"\\u6587\\u672C\"]",
                            Type = "chat"
                        },
                        new
                        {
                            Id = new Guid("e3820566-86a0-49d7-9b70-1d64c80f559f"),
                            Available = true,
                            ContextPricingTiers = "[]",
                            CreatedAt = new DateTime(2025, 7, 15, 13, 15, 43, 404, DateTimeKind.Local).AddTicks(1561),
                            DefaultContextLength = 4096,
                            Description = "GPT-4 1106 预览文本模型",
                            Enable = true,
                            Extension = "{}",
                            Icon = "OpenAI",
                            IsVersion2 = false,
                            Model = "gpt-4-1106-preview",
                            PromptRate = 5m,
                            QuotaMax = "128K",
                            QuotaType = 1,
                            Tags = "[\"\\u6587\\u672C\"]",
                            Type = "chat"
                        },
                        new
                        {
                            Id = new Guid("9200b998-e251-4199-95b4-d76a14acf861"),
                            Available = true,
                            ContextPricingTiers = "[]",
                            CreatedAt = new DateTime(2025, 7, 15, 13, 15, 43, 404, DateTimeKind.Local).AddTicks(1562),
                            DefaultContextLength = 4096,
                            Description = "GPT-4 1106 视觉预览模型",
                            Enable = true,
                            Extension = "{}",
                            Icon = "OpenAI",
                            IsVersion2 = false,
                            Model = "gpt-4-1106-vision-preview",
                            PromptRate = 10m,
                            QuotaMax = "128K",
                            QuotaType = 1,
                            Tags = "[\"\\u89C6\\u89C9\",\"\\u6587\\u672C\"]",
                            Type = "chat"
                        },
                        new
                        {
                            Id = new Guid("993e9130-12a9-453b-ab40-e56bedcc9bad"),
                            Available = true,
                            ContextPricingTiers = "[]",
                            CreatedAt = new DateTime(2025, 7, 15, 13, 15, 43, 404, DateTimeKind.Local).AddTicks(1564),
                            DefaultContextLength = 4096,
                            Description = "GPT-4 32k 文本模型",
                            Enable = true,
                            Extension = "{}",
                            Icon = "OpenAI",
                            IsVersion2 = false,
                            Model = "gpt-4-32k",
                            PromptRate = 30m,
                            QuotaMax = "32K",
                            QuotaType = 1,
                            Tags = "[\"\\u6587\\u672C\"]",
                            Type = "chat"
                        },
                        new
                        {
                            Id = new Guid("c5947c00-2286-4c3c-8e59-badea8a137a7"),
                            Available = true,
                            ContextPricingTiers = "[]",
                            CreatedAt = new DateTime(2025, 7, 15, 13, 15, 43, 404, DateTimeKind.Local).AddTicks(1565),
                            DefaultContextLength = 4096,
                            Description = "GPT-4 32k 0314 文本模型",
                            Enable = true,
                            Extension = "{}",
                            Icon = "OpenAI",
                            IsVersion2 = false,
                            Model = "gpt-4-32k-0314",
                            PromptRate = 30m,
                            QuotaMax = "32K",
                            QuotaType = 1,
                            Tags = "[\"\\u6587\\u672C\"]",
                            Type = "chat"
                        },
                        new
                        {
                            Id = new Guid("42b0ce12-119f-4551-b024-db48df2b79f0"),
                            Available = true,
                            ContextPricingTiers = "[]",
                            CreatedAt = new DateTime(2025, 7, 15, 13, 15, 43, 404, DateTimeKind.Local).AddTicks(1566),
                            DefaultContextLength = 4096,
                            Description = "GPT-4 32k 0613 文本模型",
                            Enable = true,
                            Extension = "{}",
                            Icon = "OpenAI",
                            IsVersion2 = false,
                            Model = "gpt-4-32k-0613",
                            PromptRate = 30m,
                            QuotaMax = "32K",
                            QuotaType = 1,
                            Tags = "[\"\\u6587\\u672C\"]",
                            Type = "chat"
                        },
                        new
                        {
                            Id = new Guid("31be5a5b-b282-43c6-a43f-b083c3d0ab9d"),
                            Available = true,
                            ContextPricingTiers = "[]",
                            CreatedAt = new DateTime(2025, 7, 15, 13, 15, 43, 404, DateTimeKind.Local).AddTicks(1566),
                            DefaultContextLength = 4096,
                            Description = "GPT-4 全部文本模型",
                            Enable = true,
                            Extension = "{}",
                            Icon = "OpenAI",
                            IsVersion2 = false,
                            Model = "gpt-4-all",
                            PromptRate = 30m,
                            QuotaMax = "128K",
                            QuotaType = 1,
                            Tags = "[\"\\u6587\\u672C\",\"\\u89C6\\u89C9\",\"\\u8054\\u7F51\"]",
                            Type = "chat"
                        },
                        new
                        {
                            Id = new Guid("d3132d13-5aef-44a4-a4bd-2d8ed3bad51a"),
                            Available = true,
                            ContextPricingTiers = "[]",
                            CreatedAt = new DateTime(2025, 7, 15, 13, 15, 43, 404, DateTimeKind.Local).AddTicks(1567),
                            DefaultContextLength = 4096,
                            Description = "GPT-4 Turbo 文本模型",
                            Enable = true,
                            Extension = "{}",
                            Icon = "OpenAI",
                            IsVersion2 = false,
                            Model = "gpt-4-turbo",
                            PromptRate = 5m,
                            QuotaMax = "128K",
                            QuotaType = 1,
                            Tags = "[\"\\u6587\\u672C\"]",
                            Type = "chat"
                        },
                        new
                        {
                            Id = new Guid("158d9b7c-cd19-41e5-b23d-dfc5f0df53aa"),
                            Available = true,
                            CompletionRate = 2m,
                            ContextPricingTiers = "[]",
                            CreatedAt = new DateTime(2025, 7, 15, 13, 15, 43, 404, DateTimeKind.Local).AddTicks(1569),
                            DefaultContextLength = 4096,
                            Description = "Gemini 1.5 Pro 文本模型",
                            Enable = true,
                            Extension = "{}",
                            Icon = "Google",
                            IsVersion2 = false,
                            Model = "gemini-1.5-pro",
                            PromptRate = 2m,
                            QuotaMax = "128K",
                            QuotaType = 1,
                            Tags = "[\"\\u6587\\u672C\"]",
                            Type = "chat"
                        },
                        new
                        {
                            Id = new Guid("ddedf06e-a7cf-48d4-a46a-45866fdb1785"),
                            Available = true,
                            CompletionRate = 3m,
                            ContextPricingTiers = "[]",
                            CreatedAt = new DateTime(2025, 7, 15, 13, 15, 43, 404, DateTimeKind.Local).AddTicks(1569),
                            DefaultContextLength = 4096,
                            Description = "Gemini Pro 文本模型",
                            Enable = true,
                            Extension = "{}",
                            Icon = "Google",
                            IsVersion2 = false,
                            Model = "gemini-pro",
                            PromptRate = 2m,
                            QuotaMax = "128K",
                            QuotaType = 1,
                            Tags = "[\"\\u6587\\u672C\"]",
                            Type = "chat"
                        },
                        new
                        {
                            Id = new Guid("fbe3e765-d038-4622-baa0-919fa21a2114"),
                            Available = true,
                            CompletionRate = 3m,
                            ContextPricingTiers = "[]",
                            CreatedAt = new DateTime(2025, 7, 15, 13, 15, 43, 404, DateTimeKind.Local).AddTicks(1570),
                            DefaultContextLength = 4096,
                            Description = "Gemini Pro 视觉模型",
                            Enable = true,
                            Extension = "{}",
                            Icon = "Google",
                            IsVersion2 = false,
                            Model = "gemini-pro-vision",
                            PromptRate = 2m,
                            QuotaMax = "128K",
                            QuotaType = 1,
                            Tags = "[\"\\u6587\\u672C\",\"\\u89C6\\u89C9\"]",
                            Type = "chat"
                        },
                        new
                        {
                            Id = new Guid("cb30eba3-1d4f-428e-9461-48ac8ce668cb"),
                            Available = true,
                            CompletionRate = 3m,
                            ContextPricingTiers = "[]",
                            CreatedAt = new DateTime(2025, 7, 15, 13, 15, 43, 404, DateTimeKind.Local).AddTicks(1572),
                            DefaultContextLength = 4096,
                            Description = "Gemini 1.5 Flash 文本模型",
                            Enable = true,
                            Extension = "{}",
                            Icon = "Google",
                            IsVersion2 = false,
                            Model = "gemini-1.5-flash",
                            PromptRate = 0.2m,
                            QuotaMax = "128K",
                            QuotaType = 1,
                            Tags = "[\"\\u6587\\u672C\"]",
                            Type = "chat"
                        },
                        new
                        {
                            Id = new Guid("f2572fc6-40e5-4b12-9952-de729b5e9cd4"),
                            Available = true,
                            ContextPricingTiers = "[]",
                            CreatedAt = new DateTime(2025, 7, 15, 13, 15, 43, 404, DateTimeKind.Local).AddTicks(1573),
                            DefaultContextLength = 4096,
                            Description = "GPT-4 Turbo 2024-04-09 文本模型",
                            Enable = true,
                            Extension = "{}",
                            Icon = "OpenAI",
                            IsVersion2 = false,
                            Model = "gpt-4-turbo-2024-04-09",
                            PromptRate = 5m,
                            QuotaMax = "128K",
                            QuotaType = 1,
                            Tags = "[\"\\u6587\\u672C\"]",
                            Type = "chat"
                        },
                        new
                        {
                            Id = new Guid("7aec04f8-af5f-4866-9302-ca7840b09cc1"),
                            Available = true,
                            ContextPricingTiers = "[]",
                            CreatedAt = new DateTime(2025, 7, 15, 13, 15, 43, 404, DateTimeKind.Local).AddTicks(1575),
                            DefaultContextLength = 4096,
                            Description = "GPT-4 Turbo 预览文本模型",
                            Enable = true,
                            Extension = "{}",
                            Icon = "OpenAI",
                            IsVersion2 = false,
                            Model = "gpt-4-turbo-preview",
                            PromptRate = 5m,
                            QuotaMax = "8K",
                            QuotaType = 1,
                            Tags = "[\"\\u6587\\u672C\",\"\\u89C6\\u89C9\"]",
                            Type = "chat"
                        },
                        new
                        {
                            Id = new Guid("beec9504-232f-488f-98d3-a49a7c85ae56"),
                            Available = true,
                            ContextPricingTiers = "[]",
                            CreatedAt = new DateTime(2025, 7, 15, 13, 15, 43, 404, DateTimeKind.Local).AddTicks(1576),
                            DefaultContextLength = 4096,
                            Description = "GPT-4 视觉预览模型",
                            Enable = true,
                            Extension = "{}",
                            Icon = "OpenAI",
                            IsVersion2 = false,
                            Model = "gpt-4-vision-preview",
                            PromptRate = 10m,
                            QuotaMax = "8K",
                            QuotaType = 1,
                            Tags = "[\"\\u6587\\u672C\",\"\\u89C6\\u89C9\"]",
                            Type = "chat"
                        },
                        new
                        {
                            Id = new Guid("aef9dde7-8905-464b-90c1-e9f81adf9e38"),
                            Available = true,
                            CompletionRate = 3m,
                            ContextPricingTiers = "[]",
                            CreatedAt = new DateTime(2025, 7, 15, 13, 15, 43, 404, DateTimeKind.Local).AddTicks(1577),
                            DefaultContextLength = 4096,
                            Description = "GPT-4o 文本模型",
                            Enable = true,
                            Extension = "{}",
                            Icon = "OpenAI",
                            IsVersion2 = false,
                            Model = "gpt-4o",
                            PromptRate = 3m,
                            QuotaMax = "128K",
                            QuotaType = 1,
                            Tags = "[\"\\u6587\\u672C\",\"\\u89C6\\u89C9\",\"\\u97F3\\u9891\"]",
                            Type = "chat"
                        },
                        new
                        {
                            Id = new Guid("4d7311b6-8e43-4cc0-b923-a463d0c12812"),
                            Available = true,
                            CompletionRate = 4m,
                            ContextPricingTiers = "[]",
                            CreatedAt = new DateTime(2025, 7, 15, 13, 15, 43, 404, DateTimeKind.Local).AddTicks(1578),
                            DefaultContextLength = 4096,
                            Description = "ChatGPT 4o 最新文本模型",
                            Enable = true,
                            Extension = "{}",
                            Icon = "OpenAI",
                            IsVersion2 = false,
                            Model = "chatgpt-4o-latest",
                            PromptRate = 3m,
                            QuotaMax = "128K",
                            QuotaType = 1,
                            Tags = "[\"\\u6587\\u672C\",\"\\u89C6\\u89C9\",\"\\u97F3\\u9891\"]",
                            Type = "chat"
                        },
                        new
                        {
                            Id = new Guid("e4084fc5-1369-46d4-90b8-d9c55258a09a"),
                            Available = true,
                            CompletionRate = 4m,
                            ContextPricingTiers = "[]",
                            CreatedAt = new DateTime(2025, 7, 15, 13, 15, 43, 404, DateTimeKind.Local).AddTicks(1579),
                            DefaultContextLength = 4096,
                            Description = "GPT-4o Mini 文本模型",
                            Enable = true,
                            Extension = "{}",
                            Icon = "OpenAI",
                            IsVersion2 = false,
                            Model = "gpt-4o-mini",
                            PromptRate = 0.07m,
                            QuotaMax = "128K",
                            QuotaType = 1,
                            Tags = "[\"\\u6587\\u672C\",\"\\u89C6\\u89C9\",\"\\u97F3\\u9891\"]",
                            Type = "chat"
                        },
                        new
                        {
                            Id = new Guid("ebc9adc5-1957-41c7-a866-2f196f13d2bf"),
                            Available = true,
                            CompletionRate = 4m,
                            ContextPricingTiers = "[]",
                            CreatedAt = new DateTime(2025, 7, 15, 13, 15, 43, 404, DateTimeKind.Local).AddTicks(1580),
                            DefaultContextLength = 4096,
                            Description = "GPT-4o Mini 2024-07-18 文本模型",
                            Enable = true,
                            Extension = "{}",
                            Icon = "OpenAI",
                            IsVersion2 = false,
                            Model = "gpt-4o-mini-2024-07-18",
                            PromptRate = 0.07m,
                            QuotaMax = "128K",
                            QuotaType = 1,
                            Tags = "[\"\\u6587\\u672C\",\"\\u89C6\\u89C9\",\"\\u97F3\\u9891\"]",
                            Type = "chat"
                        },
                        new
                        {
                            Id = new Guid("4a819f09-af16-45fb-a789-7297e02ad75c"),
                            Available = true,
                            CompletionRate = 4m,
                            ContextPricingTiers = "[]",
                            CreatedAt = new DateTime(2025, 7, 15, 13, 15, 43, 404, DateTimeKind.Local).AddTicks(1582),
                            DefaultContextLength = 4096,
                            Description = "GPT-4o 2024-05-13 文本模型",
                            Enable = true,
                            Extension = "{}",
                            Icon = "OpenAI",
                            IsVersion2 = false,
                            Model = "gpt-4o-2024-05-13",
                            PromptRate = 3m,
                            QuotaMax = "128K",
                            QuotaType = 1,
                            Tags = "[\"\\u6587\\u672C\",\"\\u89C6\\u89C9\",\"\\u97F3\\u9891\"]",
                            Type = "chat"
                        },
                        new
                        {
                            Id = new Guid("8801d416-0f26-4291-8d6d-56cca26482ff"),
                            Available = true,
                            CompletionRate = 4m,
                            ContextPricingTiers = "[]",
                            CreatedAt = new DateTime(2025, 7, 15, 13, 15, 43, 404, DateTimeKind.Local).AddTicks(1584),
                            DefaultContextLength = 4096,
                            Description = "GPT-4o 2024-08-06 文本模型",
                            Enable = true,
                            Extension = "{}",
                            Icon = "OpenAI",
                            IsVersion2 = false,
                            Model = "gpt-4o-2024-08-06",
                            PromptRate = 1.25m,
                            QuotaMax = "128K",
                            QuotaType = 1,
                            Tags = "[\"\\u6587\\u672C\",\"\\u89C6\\u89C9\",\"\\u97F3\\u9891\"]",
                            Type = "chat"
                        },
                        new
                        {
                            Id = new Guid("2cd76fa2-0979-48e1-a6a9-7faed240c958"),
                            Available = true,
                            ContextPricingTiers = "[]",
                            CreatedAt = new DateTime(2025, 7, 15, 13, 15, 43, 404, DateTimeKind.Local).AddTicks(1585),
                            DefaultContextLength = 4096,
                            Description = "Moonshot v1 128k 文本模型",
                            Enable = true,
                            Extension = "{}",
                            Icon = "Moonshot",
                            IsVersion2 = false,
                            Model = "moonshot-v1-128k",
                            PromptRate = 5.06m,
                            QuotaMax = "128K",
                            QuotaType = 1,
                            Tags = "[\"\\u6587\\u672C\"]",
                            Type = "chat"
                        },
                        new
                        {
                            Id = new Guid("4fd92377-70c1-493a-b5e0-47cc5ced8237"),
                            Available = true,
                            ContextPricingTiers = "[]",
                            CreatedAt = new DateTime(2025, 7, 15, 13, 15, 43, 404, DateTimeKind.Local).AddTicks(1585),
                            DefaultContextLength = 4096,
                            Description = "Moonshot v1 32k 文本模型",
                            Enable = true,
                            Extension = "{}",
                            Icon = "Moonshot",
                            IsVersion2 = false,
                            Model = "moonshot-v1-32k",
                            PromptRate = 2m,
                            QuotaMax = "32K",
                            QuotaType = 1,
                            Tags = "[\"\\u6587\\u672C\"]",
                            Type = "chat"
                        },
                        new
                        {
                            Id = new Guid("4d5e83fb-c76a-4103-85ec-30c9a850253b"),
                            Available = true,
                            ContextPricingTiers = "[]",
                            CreatedAt = new DateTime(2025, 7, 15, 13, 15, 43, 404, DateTimeKind.Local).AddTicks(1586),
                            DefaultContextLength = 4096,
                            Description = "Moonshot v1 8k 文本模型",
                            Enable = true,
                            Extension = "{}",
                            Icon = "Moonshot",
                            IsVersion2 = false,
                            Model = "moonshot-v1-8k",
                            PromptRate = 1m,
                            QuotaMax = "8K",
                            QuotaType = 1,
                            Tags = "[\"\\u6587\\u672C\"]",
                            Type = "chat"
                        },
                        new
                        {
                            Id = new Guid("2a5b6bc9-ed77-460b-b066-2ede081b97ce"),
                            Available = true,
                            ContextPricingTiers = "[]",
                            CreatedAt = new DateTime(2025, 7, 15, 13, 15, 43, 404, DateTimeKind.Local).AddTicks(1587),
                            DefaultContextLength = 4096,
                            Description = "Text Babbage 001 文本模型",
                            Enable = true,
                            Extension = "{}",
                            Icon = "OpenAI",
                            IsVersion2 = false,
                            Model = "text-babbage-001",
                            PromptRate = 0.25m,
                            QuotaMax = "8K",
                            QuotaType = 1,
                            Tags = "[\"\\u6587\\u672C\"]",
                            Type = "chat"
                        },
                        new
                        {
                            Id = new Guid("6ec2d304-07b7-4f6b-a641-be6d80d4ab1f"),
                            Available = true,
                            ContextPricingTiers = "[]",
                            CreatedAt = new DateTime(2025, 7, 15, 13, 15, 43, 404, DateTimeKind.Local).AddTicks(1588),
                            DefaultContextLength = 4096,
                            Description = "Text Curie 001 文本模型",
                            Enable = true,
                            Extension = "{}",
                            Icon = "OpenAI",
                            IsVersion2 = false,
                            Model = "text-curie-001",
                            PromptRate = 1m,
                            QuotaMax = "128K",
                            QuotaType = 1,
                            Tags = "[\"\\u6587\\u672C\"]",
                            Type = "chat"
                        },
                        new
                        {
                            Id = new Guid("c85fdc28-4982-4579-895f-fae9bdc4813c"),
                            Available = true,
                            ContextPricingTiers = "[]",
                            CreatedAt = new DateTime(2025, 7, 15, 13, 15, 43, 404, DateTimeKind.Local).AddTicks(1589),
                            DefaultContextLength = 4096,
                            Description = "Text Davinci 002 文本模型",
                            Enable = true,
                            Extension = "{}",
                            Icon = "OpenAI",
                            IsVersion2 = false,
                            Model = "text-davinci-002",
                            PromptRate = 10m,
                            QuotaMax = "128K",
                            QuotaType = 1,
                            Tags = "[\"\\u6587\\u672C\"]",
                            Type = "chat"
                        },
                        new
                        {
                            Id = new Guid("a77fff10-b221-41f6-822c-34204c70c29d"),
                            Available = true,
                            ContextPricingTiers = "[]",
                            CreatedAt = new DateTime(2025, 7, 15, 13, 15, 43, 404, DateTimeKind.Local).AddTicks(1591),
                            DefaultContextLength = 4096,
                            Description = "Text Davinci 003 文本模型",
                            Enable = true,
                            Extension = "{}",
                            Icon = "OpenAI",
                            IsVersion2 = false,
                            Model = "text-davinci-003",
                            PromptRate = 10m,
                            QuotaMax = "8K",
                            QuotaType = 1,
                            Tags = "[\"\\u6587\\u672C\"]",
                            Type = "chat"
                        },
                        new
                        {
                            Id = new Guid("7ace8f5c-a783-4d05-b571-79ce430ba6a9"),
                            Available = true,
                            ContextPricingTiers = "[]",
                            CreatedAt = new DateTime(2025, 7, 15, 13, 15, 43, 404, DateTimeKind.Local).AddTicks(1593),
                            DefaultContextLength = 4096,
                            Description = "Text Davinci Edit 001 文本模型",
                            Enable = true,
                            Extension = "{}",
                            Icon = "OpenAI",
                            IsVersion2 = false,
                            Model = "text-davinci-edit-001",
                            PromptRate = 10m,
                            QuotaMax = "8K",
                            QuotaType = 1,
                            Tags = "[\"\\u6587\\u672C\"]",
                            Type = "chat"
                        },
                        new
                        {
                            Id = new Guid("bea532e7-914b-49c8-93a9-1803ce440320"),
                            Available = true,
                            ContextPricingTiers = "[]",
                            CreatedAt = new DateTime(2025, 7, 15, 13, 15, 43, 404, DateTimeKind.Local).AddTicks(1594),
                            DefaultContextLength = 4096,
                            Description = "Text Embedding 3 Large 嵌入模型",
                            Enable = true,
                            Extension = "{}",
                            Icon = "OpenAI",
                            IsVersion2 = false,
                            Model = "text-embedding-3-large",
                            PromptRate = 0.13m,
                            QuotaMax = "8K",
                            QuotaType = 1,
                            Tags = "[\"\\u6587\\u672C\"]",
                            Type = "embedding"
                        },
                        new
                        {
                            Id = new Guid("f3e3d77c-a01f-4cd0-8a6e-e1a7b079e165"),
                            Available = true,
                            ContextPricingTiers = "[]",
                            CreatedAt = new DateTime(2025, 7, 15, 13, 15, 43, 404, DateTimeKind.Local).AddTicks(1595),
                            DefaultContextLength = 4096,
                            Description = "Text Embedding 3 Small 嵌入模型",
                            Enable = true,
                            Extension = "{}",
                            Icon = "OpenAI",
                            IsVersion2 = false,
                            Model = "text-embedding-3-small",
                            PromptRate = 0.1m,
                            QuotaMax = "8K",
                            QuotaType = 1,
                            Tags = "[\"\\u6587\\u672C\"]",
                            Type = "embedding"
                        },
                        new
                        {
                            Id = new Guid("748834ef-91fb-40a0-8023-a8415247ede8"),
                            Available = true,
                            ContextPricingTiers = "[]",
                            CreatedAt = new DateTime(2025, 7, 15, 13, 15, 43, 404, DateTimeKind.Local).AddTicks(1596),
                            DefaultContextLength = 4096,
                            Description = "Text Embedding Ada 002 嵌入模型",
                            Enable = true,
                            Extension = "{}",
                            Icon = "OpenAI",
                            IsVersion2 = false,
                            Model = "text-embedding-ada-002",
                            PromptRate = 0.1m,
                            QuotaMax = "8K",
                            QuotaType = 1,
                            Tags = "[\"\\u6587\\u672C\"]",
                            Type = "embedding"
                        },
                        new
                        {
                            Id = new Guid("ee9f61a8-2e14-4174-addc-a3b87125c772"),
                            Available = true,
                            ContextPricingTiers = "[]",
                            CreatedAt = new DateTime(2025, 7, 15, 13, 15, 43, 404, DateTimeKind.Local).AddTicks(1596),
                            DefaultContextLength = 4096,
                            Description = "TTS 1 语音合成模型",
                            Enable = true,
                            Extension = "{}",
                            Icon = "OpenAI",
                            IsVersion2 = false,
                            Model = "tts-1",
                            PromptRate = 7.5m,
                            QuotaType = 1,
                            Tags = "[\"\\u97F3\\u9891\"]",
                            Type = "tts"
                        },
                        new
                        {
                            Id = new Guid("ae0b2977-0648-4809-9104-958add12d148"),
                            Available = true,
                            ContextPricingTiers = "[]",
                            CreatedAt = new DateTime(2025, 7, 15, 13, 15, 43, 404, DateTimeKind.Local).AddTicks(1597),
                            DefaultContextLength = 4096,
                            Description = "TTS 1 1106 语音合成模型",
                            Enable = true,
                            Extension = "{}",
                            Icon = "OpenAI",
                            IsVersion2 = false,
                            Model = "tts-1-1106",
                            PromptRate = 7.5m,
                            QuotaType = 1,
                            Tags = "[\"\\u97F3\\u9891\"]",
                            Type = "tts"
                        },
                        new
                        {
                            Id = new Guid("9528441f-f13e-4b1e-9b1c-5f630de551e5"),
                            Available = true,
                            ContextPricingTiers = "[]",
                            CreatedAt = new DateTime(2025, 7, 15, 13, 15, 43, 404, DateTimeKind.Local).AddTicks(1598),
                            DefaultContextLength = 4096,
                            Description = "TTS 1 HD 语音合成模型",
                            Enable = true,
                            Extension = "{}",
                            Icon = "OpenAI",
                            IsVersion2 = false,
                            Model = "tts-1-hd",
                            PromptRate = 15m,
                            QuotaType = 2,
                            Tags = "[\"\\u97F3\\u9891\"]",
                            Type = "tts"
                        },
                        new
                        {
                            Id = new Guid("5a70efab-ab5a-4610-812c-4551ba408330"),
                            Available = true,
                            ContextPricingTiers = "[]",
                            CreatedAt = new DateTime(2025, 7, 15, 13, 15, 43, 404, DateTimeKind.Local).AddTicks(1600),
                            DefaultContextLength = 4096,
                            Description = "TTS 1 HD 1106 语音合成模型",
                            Enable = true,
                            Extension = "{}",
                            Icon = "OpenAI",
                            IsVersion2 = false,
                            Model = "tts-1-hd-1106",
                            PromptRate = 15m,
                            QuotaType = 2,
                            Tags = "[\"\\u97F3\\u9891\"]",
                            Type = "tts"
                        },
                        new
                        {
                            Id = new Guid("d67b8b13-faa1-4f73-a149-0d400c03e925"),
                            Available = true,
                            ContextPricingTiers = "[]",
                            CreatedAt = new DateTime(2025, 7, 15, 13, 15, 43, 404, DateTimeKind.Local).AddTicks(1600),
                            DefaultContextLength = 4096,
                            Description = "Whisper 1 语音识别模型",
                            Enable = true,
                            Extension = "{}",
                            Icon = "OpenAI",
                            IsVersion2 = false,
                            Model = "whisper-1",
                            PromptRate = 15m,
                            QuotaType = 2,
                            Tags = "[\"\\u97F3\\u9891\"]",
                            Type = "stt"
                        },
                        new
                        {
                            Id = new Guid("a0322c5b-aa72-4e97-89e8-05a07b1bdb9e"),
                            Available = true,
                            ContextPricingTiers = "[]",
                            CreatedAt = new DateTime(2025, 7, 15, 13, 15, 43, 404, DateTimeKind.Local).AddTicks(1601),
                            DefaultContextLength = 4096,
                            Description = "Hunyuan Lite 文本模型",
                            Enable = true,
                            Extension = "{}",
                            Icon = "Hunyuan",
                            IsVersion2 = false,
                            Model = "hunyuan-lite",
                            PromptRate = 0.75m,
                            QuotaMax = "128K",
                            QuotaType = 1,
                            Tags = "[\"\\u6587\\u672C\"]",
                            Type = "chat"
                        },
                        new
                        {
                            Id = new Guid("af2dcc43-b92a-4286-bc07-ea1be1b11d65"),
                            Available = true,
                            CompletionRate = 2m,
                            ContextPricingTiers = "[]",
                            CreatedAt = new DateTime(2025, 7, 15, 13, 15, 43, 404, DateTimeKind.Local).AddTicks(1602),
                            DefaultContextLength = 4096,
                            Description = "通用文本模型",
                            Enable = true,
                            Extension = "{}",
                            Icon = "Spark",
                            IsVersion2 = false,
                            Model = "general",
                            PromptRate = 2m,
                            QuotaMax = "128K",
                            QuotaType = 1,
                            Tags = "[\"\\u6587\\u672C\"]",
                            Type = "chat"
                        },
                        new
                        {
                            Id = new Guid("ae9f76ea-ac3e-46d1-8600-a84d172ecc1c"),
                            Available = true,
                            CompletionRate = 2m,
                            ContextPricingTiers = "[]",
                            CreatedAt = new DateTime(2025, 7, 15, 13, 15, 43, 404, DateTimeKind.Local).AddTicks(1603),
                            DefaultContextLength = 4096,
                            Description = "通用文本模型 v3",
                            Enable = true,
                            Extension = "{}",
                            Icon = "Spark",
                            IsVersion2 = false,
                            Model = "generalv3",
                            PromptRate = 2m,
                            QuotaMax = "128K",
                            QuotaType = 1,
                            Tags = "[\"\\u6587\\u672C\"]",
                            Type = "chat"
                        },
                        new
                        {
                            Id = new Guid("3ec3a288-7838-4866-92f6-4a9da9ae655e"),
                            Available = true,
                            CompletionRate = 2m,
                            ContextPricingTiers = "[]",
                            CreatedAt = new DateTime(2025, 7, 15, 13, 15, 43, 404, DateTimeKind.Local).AddTicks(1604),
                            DefaultContextLength = 4096,
                            Description = "通用文本模型 v3.5",
                            Enable = true,
                            Extension = "{}",
                            Icon = "Spark",
                            IsVersion2 = false,
                            Model = "generalv3.5",
                            PromptRate = 2m,
                            QuotaMax = "128K",
                            QuotaType = 1,
                            Tags = "[\"\\u6587\\u672C\"]",
                            Type = "chat"
                        },
                        new
                        {
                            Id = new Guid("60bcd31d-f8e8-4d39-ba13-8385f52cc4fb"),
                            Available = true,
                            CompletionRate = 3m,
                            ContextPricingTiers = "[]",
                            CreatedAt = new DateTime(2025, 7, 15, 13, 15, 43, 404, DateTimeKind.Local).AddTicks(1604),
                            DefaultContextLength = 4096,
                            Description = "4.0 超级文本模型",
                            Enable = true,
                            Extension = "{}",
                            Icon = "Spark",
                            IsVersion2 = false,
                            Model = "4.0Ultra",
                            PromptRate = 5m,
                            QuotaMax = "128K",
                            QuotaType = 1,
                            Tags = "[\"\\u6587\\u672C\"]",
                            Type = "chat"
                        },
                        new
                        {
                            Id = new Guid("bb96e585-9f79-4f58-92f3-5383ef535d4e"),
                            Available = true,
                            ContextPricingTiers = "[]",
                            CreatedAt = new DateTime(2025, 7, 15, 13, 15, 43, 404, DateTimeKind.Local).AddTicks(1605),
                            DefaultContextLength = 4096,
                            Description = "ChatGLM Lite 文本模型",
                            Enable = true,
                            Extension = "{}",
                            Icon = "ChatGLM",
                            IsVersion2 = false,
                            Model = "chatglm_lite",
                            PromptRate = 0.1429m,
                            QuotaMax = "128K",
                            QuotaType = 1,
                            Tags = "[\"\\u6587\\u672C\"]",
                            Type = "chat"
                        },
                        new
                        {
                            Id = new Guid("fcdc8d72-1829-456c-afd7-01cc050d70f1"),
                            Available = true,
                            ContextPricingTiers = "[]",
                            CreatedAt = new DateTime(2025, 7, 15, 13, 15, 43, 404, DateTimeKind.Local).AddTicks(1607),
                            DefaultContextLength = 4096,
                            Description = "ChatGLM Pro 文本模型",
                            Enable = true,
                            Extension = "{}",
                            Icon = "ChatGLM",
                            IsVersion2 = false,
                            Model = "chatglm_pro",
                            PromptRate = 0.7143m,
                            QuotaMax = "128K",
                            QuotaType = 1,
                            Tags = "[\"\\u6587\\u672C\"]",
                            Type = "chat"
                        },
                        new
                        {
                            Id = new Guid("64394954-0cac-455a-a968-37323f4e141f"),
                            Available = true,
                            ContextPricingTiers = "[]",
                            CreatedAt = new DateTime(2025, 7, 15, 13, 15, 43, 404, DateTimeKind.Local).AddTicks(1608),
                            DefaultContextLength = 4096,
                            Description = "ChatGLM 标准文本模型",
                            Enable = true,
                            Extension = "{}",
                            Icon = "ChatGLM",
                            IsVersion2 = false,
                            Model = "chatglm_std",
                            PromptRate = 0.3572m,
                            QuotaMax = "128K",
                            QuotaType = 1,
                            Tags = "[\"\\u6587\\u672C\"]",
                            Type = "chat"
                        },
                        new
                        {
                            Id = new Guid("e694fd22-3b2a-4bf9-8471-a121b31156ee"),
                            Available = true,
                            ContextPricingTiers = "[]",
                            CreatedAt = new DateTime(2025, 7, 15, 13, 15, 43, 404, DateTimeKind.Local).AddTicks(1609),
                            DefaultContextLength = 4096,
                            Description = "ChatGLM Turbo 文本模型",
                            Enable = true,
                            Extension = "{}",
                            Icon = "ChatGLM",
                            IsVersion2 = false,
                            Model = "chatglm_turbo",
                            PromptRate = 0.3572m,
                            QuotaMax = "128K",
                            QuotaType = 1,
                            Tags = "[\"\\u6587\\u672C\"]",
                            Type = "chat"
                        },
                        new
                        {
                            Id = new Guid("8a717879-0c6c-4d89-bd01-238e31ca9fd3"),
                            Available = true,
                            ContextPricingTiers = "[]",
                            CreatedAt = new DateTime(2025, 7, 15, 13, 15, 43, 404, DateTimeKind.Local).AddTicks(1609),
                            DefaultContextLength = 4096,
                            Description = "Claude 2 文本模型",
                            Enable = true,
                            Extension = "{}",
                            Icon = "Claude",
                            IsVersion2 = false,
                            Model = "claude-2",
                            PromptRate = 7.5m,
                            QuotaMax = "128K",
                            QuotaType = 1,
                            Tags = "[\"\\u6587\\u672C\"]",
                            Type = "chat"
                        },
                        new
                        {
                            Id = new Guid("caf74175-ffbb-40db-a0b0-d13ab6aa632c"),
                            Available = true,
                            ContextPricingTiers = "[]",
                            CreatedAt = new DateTime(2025, 7, 15, 13, 15, 43, 404, DateTimeKind.Local).AddTicks(1614),
                            DefaultContextLength = 4096,
                            Description = "Claude 2.0 文本模型",
                            Enable = true,
                            Extension = "{}",
                            Icon = "Claude",
                            IsVersion2 = false,
                            Model = "claude-2.0",
                            PromptRate = 7.5m,
                            QuotaMax = "128K",
                            QuotaType = 1,
                            Tags = "[\"\\u6587\\u672C\"]",
                            Type = "chat"
                        },
                        new
                        {
                            Id = new Guid("fdf9cc66-8558-4b2c-ad55-8f69700a74d8"),
                            Available = true,
                            ContextPricingTiers = "[]",
                            CreatedAt = new DateTime(2025, 7, 15, 13, 15, 43, 404, DateTimeKind.Local).AddTicks(1615),
                            DefaultContextLength = 4096,
                            Description = "Claude 2.1 文本模型",
                            Enable = true,
                            Extension = "{}",
                            Icon = "Claude",
                            IsVersion2 = false,
                            Model = "claude-2.1",
                            PromptRate = 7.5m,
                            QuotaMax = "128K",
                            QuotaType = 1,
                            Tags = "[\"\\u6587\\u672C\"]",
                            Type = "chat"
                        },
                        new
                        {
                            Id = new Guid("7d7b522d-f215-4a19-af44-6bf0a420e75e"),
                            Available = true,
                            CompletionRate = 5m,
                            ContextPricingTiers = "[]",
                            CreatedAt = new DateTime(2025, 7, 15, 13, 15, 43, 404, DateTimeKind.Local).AddTicks(1616),
                            DefaultContextLength = 4096,
                            Description = "Claude 3 Haiku 文本模型",
                            Enable = true,
                            Extension = "{}",
                            Icon = "Claude",
                            IsVersion2 = false,
                            Model = "claude-3-haiku",
                            PromptRate = 0.5m,
                            QuotaMax = "128K",
                            QuotaType = 1,
                            Tags = "[\"\\u6587\\u672C\"]",
                            Type = "chat"
                        },
                        new
                        {
                            Id = new Guid("2b97f85b-fec4-4920-a154-5cd60c76c62f"),
                            Available = true,
                            CompletionRate = 5m,
                            ContextPricingTiers = "[]",
                            CreatedAt = new DateTime(2025, 7, 15, 13, 15, 43, 404, DateTimeKind.Local).AddTicks(1617),
                            DefaultContextLength = 4096,
                            Description = "Claude 3 Haiku 20240307 文本模型",
                            Enable = true,
                            Extension = "{}",
                            Icon = "Claude",
                            IsVersion2 = false,
                            Model = "claude-3-haiku-20240307",
                            PromptRate = 0.5m,
                            QuotaMax = "128K",
                            QuotaType = 1,
                            Tags = "[\"\\u6587\\u672C\"]",
                            Type = "chat"
                        },
                        new
                        {
                            Id = new Guid("d52a6ee0-bb47-40df-9b50-9f83afeb0cb0"),
                            Available = true,
                            CompletionRate = 5m,
                            ContextPricingTiers = "[]",
                            CreatedAt = new DateTime(2025, 7, 15, 13, 15, 43, 404, DateTimeKind.Local).AddTicks(1619),
                            DefaultContextLength = 4096,
                            Description = "Claude 3.5 Sonnet 20240620 文本模型",
                            Enable = true,
                            Extension = "{}",
                            Icon = "Claude",
                            IsVersion2 = false,
                            Model = "claude-3-5-sonnet-20240620",
                            PromptRate = 3m,
                            QuotaMax = "128K",
                            QuotaType = 1,
                            Tags = "[\"\\u6587\\u672C\"]",
                            Type = "chat"
                        },
                        new
                        {
                            Id = new Guid("146dc3ec-7783-4218-986e-8cd8198b66b3"),
                            Available = true,
                            CompletionRate = 5m,
                            ContextPricingTiers = "[]",
                            CreatedAt = new DateTime(2025, 7, 15, 13, 15, 43, 404, DateTimeKind.Local).AddTicks(1620),
                            DefaultContextLength = 4096,
                            Description = "Claude 3 Sonnet 20240229 文本模型",
                            Enable = true,
                            Extension = "{}",
                            Icon = "Claude",
                            IsVersion2 = false,
                            Model = "claude-3-sonnet-20240229",
                            PromptRate = 3m,
                            QuotaMax = "128K",
                            QuotaType = 1,
                            Tags = "[\"\\u6587\\u672C\"]",
                            Type = "chat"
                        },
                        new
                        {
                            Id = new Guid("95729d55-a1d4-43d7-9ac4-dd479452334c"),
                            Available = true,
                            CompletionRate = 5m,
                            ContextPricingTiers = "[]",
                            CreatedAt = new DateTime(2025, 7, 15, 13, 15, 43, 404, DateTimeKind.Local).AddTicks(1621),
                            DefaultContextLength = 4096,
                            Description = "Claude 3 Opus 20240229 文本模型",
                            Enable = true,
                            Extension = "{}",
                            Icon = "Claude",
                            IsVersion2 = false,
                            Model = "claude-3-opus-20240229",
                            PromptRate = 30m,
                            QuotaMax = "128K",
                            QuotaType = 1,
                            Tags = "[\"\\u6587\\u672C\"]",
                            Type = "chat"
                        },
                        new
                        {
                            Id = new Guid("2c8c4c18-e925-4d50-90f3-683a6edf1624"),
                            Available = true,
                            ContextPricingTiers = "[]",
                            CreatedAt = new DateTime(2025, 7, 15, 13, 15, 43, 404, DateTimeKind.Local).AddTicks(1622),
                            DefaultContextLength = 4096,
                            Description = "Claude Instant 1 文本模型",
                            Enable = true,
                            Extension = "{}",
                            Icon = "Claude",
                            IsVersion2 = false,
                            Model = "claude-instant-1",
                            PromptRate = 0.815m,
                            QuotaMax = "128K",
                            QuotaType = 1,
                            Tags = "[\"\\u6587\\u672C\"]",
                            Type = "chat"
                        },
                        new
                        {
                            Id = new Guid("1c5bf64a-008b-4ecb-8474-8cbe450c97f3"),
                            Available = true,
                            ContextPricingTiers = "[]",
                            CreatedAt = new DateTime(2025, 7, 15, 13, 15, 43, 404, DateTimeKind.Local).AddTicks(1624),
                            DefaultContextLength = 4096,
                            Description = "Claude Instant 1.2 文本模型",
                            Enable = true,
                            Extension = "{}",
                            Icon = "Claude",
                            IsVersion2 = false,
                            Model = "claude-instant-1.2",
                            PromptRate = 0.4m,
                            QuotaMax = "128K",
                            QuotaType = 1,
                            Tags = "[\"\\u6587\\u672C\"]",
                            Type = "chat"
                        },
                        new
                        {
                            Id = new Guid("d6fdf1b7-3d0b-4aa0-8020-5a32319a4aa5"),
                            Available = true,
                            ContextPricingTiers = "[]",
                            CreatedAt = new DateTime(2025, 7, 15, 13, 15, 43, 404, DateTimeKind.Local).AddTicks(1625),
                            DefaultContextLength = 4096,
                            Description = "DALL-E 2 图像生成模型",
                            Enable = true,
                            Extension = "{}",
                            Icon = "OpenAI",
                            IsVersion2 = false,
                            Model = "dall-e-2",
                            PromptRate = 8000m,
                            QuotaType = 2,
                            Tags = "[\"\\u56FE\\u7247\"]",
                            Type = "image"
                        },
                        new
                        {
                            Id = new Guid("5ac106cc-bfbe-4865-b28e-d82b5bd7e0a6"),
                            Available = true,
                            ContextPricingTiers = "[]",
                            CreatedAt = new DateTime(2025, 7, 15, 13, 15, 43, 404, DateTimeKind.Local).AddTicks(1625),
                            DefaultContextLength = 4096,
                            Description = "DALL-E 3 图像生成模型",
                            Enable = true,
                            Extension = "{}",
                            Icon = "OpenAI",
                            IsVersion2 = false,
                            Model = "dall-e-3",
                            PromptRate = 20000m,
                            QuotaType = 2,
                            Tags = "[\"\\u56FE\\u7247\"]",
                            Type = "image"
                        },
                        new
                        {
                            Id = new Guid("84f574a8-c058-4cca-be1c-0228936fb703"),
                            Available = true,
                            ContextPricingTiers = "[]",
                            CreatedAt = new DateTime(2025, 7, 15, 13, 15, 43, 404, DateTimeKind.Local).AddTicks(1626),
                            DefaultContextLength = 4096,
                            Description = "GPT Image 图片生成模型",
                            Enable = true,
                            Extension = "{}",
                            Icon = "OpenAI",
                            IsVersion2 = false,
                            Model = "gpt-image-1",
                            PromptRate = 50000m,
                            QuotaType = 2,
                            Tags = "[\"\\u56FE\\u7247\"]",
                            Type = "image"
                        },
                        new
                        {
                            Id = new Guid("90e27304-2c75-4338-89ca-358780fbdd7e"),
                            Available = true,
                            ContextPricingTiers = "[]",
                            CreatedAt = new DateTime(2025, 7, 15, 13, 15, 43, 404, DateTimeKind.Local).AddTicks(1628),
                            DefaultContextLength = 4096,
                            Description = "Embedding 2 嵌入模型",
                            Enable = true,
                            Extension = "{}",
                            Icon = "OpenAI",
                            IsVersion2 = false,
                            Model = "embedding-2",
                            PromptRate = 0.0355m,
                            QuotaMax = "",
                            QuotaType = 1,
                            Tags = "[\"\\u5D4C\\u5165\\u6A21\\u578B\"]",
                            Type = "embedding"
                        },
                        new
                        {
                            Id = new Guid("ce2a1a28-97fc-48f7-82bc-bc808f74ee1d"),
                            Available = true,
                            ContextPricingTiers = "[]",
                            CreatedAt = new DateTime(2025, 7, 15, 13, 15, 43, 404, DateTimeKind.Local).AddTicks(1629),
                            DefaultContextLength = 4096,
                            Description = "Embedding BERT 512 v1 嵌入模型",
                            Enable = true,
                            Extension = "{}",
                            Icon = "OpenAI",
                            IsVersion2 = false,
                            Model = "embedding-bert-512-v1",
                            PromptRate = 0.1m,
                            QuotaMax = "128K",
                            QuotaType = 1,
                            Tags = "[\"\\u5D4C\\u5165\\u6A21\\u578B\"]",
                            Type = "embedding"
                        },
                        new
                        {
                            Id = new Guid("8d02ef12-f63d-49bc-8139-8c6ac91d8e30"),
                            Available = true,
                            ContextPricingTiers = "[]",
                            CreatedAt = new DateTime(2025, 7, 15, 13, 15, 43, 404, DateTimeKind.Local).AddTicks(1629),
                            DefaultContextLength = 4096,
                            Description = "Embedding S1 v1 嵌入模型",
                            Enable = true,
                            Extension = "{}",
                            IsVersion2 = false,
                            Model = "embedding_s1_v1",
                            PromptRate = 0.1m,
                            QuotaMax = "128K",
                            QuotaType = 1,
                            Tags = "[\"\\u5D4C\\u5165\\u6A21\\u578B\"]",
                            Type = "embedding"
                        },
                        new
                        {
                            Id = new Guid("61d3cfc8-0229-45db-b6e9-58b61273f45e"),
                            Available = true,
                            ContextPricingTiers = "[]",
                            CreatedAt = new DateTime(2025, 7, 15, 13, 15, 43, 404, DateTimeKind.Local).AddTicks(1630),
                            DefaultContextLength = 4096,
                            Description = "GLM 3 Turbo 文本模型",
                            Enable = true,
                            Extension = "{}",
                            Icon = "ChatGLM",
                            IsVersion2 = false,
                            Model = "glm-3-turbo",
                            PromptRate = 0.355m,
                            QuotaMax = "128K",
                            QuotaType = 1,
                            Tags = "[\"\\u6587\\u672C\"]",
                            Type = "chat"
                        },
                        new
                        {
                            Id = new Guid("89577e5d-717b-407e-8eff-b86057dcbcda"),
                            Available = true,
                            ContextPricingTiers = "[]",
                            CreatedAt = new DateTime(2025, 7, 15, 13, 15, 43, 404, DateTimeKind.Local).AddTicks(1631),
                            DefaultContextLength = 4096,
                            Description = "GLM 4 文本模型",
                            Enable = true,
                            Extension = "{}",
                            Icon = "ChatGLM",
                            IsVersion2 = false,
                            Model = "glm-4",
                            PromptRate = 15m,
                            QuotaMax = "128K",
                            QuotaType = 1,
                            Tags = "[\"\\u6587\\u672C\"]",
                            Type = "chat"
                        },
                        new
                        {
                            Id = new Guid("c047963d-edfa-49e9-bfb8-397e574e7375"),
                            Available = true,
                            ContextPricingTiers = "[]",
                            CreatedAt = new DateTime(2025, 7, 15, 13, 15, 43, 404, DateTimeKind.Local).AddTicks(1632),
                            DefaultContextLength = 4096,
                            Description = "GLM 4 全部文本模型",
                            Enable = true,
                            Extension = "{}",
                            Icon = "ChatGLM",
                            IsVersion2 = false,
                            Model = "glm-4-all",
                            PromptRate = 30m,
                            QuotaMax = "128K",
                            QuotaType = 1,
                            Tags = "[\"\\u6587\\u672C\"]",
                            Type = "chat"
                        },
                        new
                        {
                            Id = new Guid("4c0964a9-86c0-4a13-9b50-c974beda9d5c"),
                            Available = true,
                            ContextPricingTiers = "[]",
                            CreatedAt = new DateTime(2025, 7, 15, 13, 15, 43, 404, DateTimeKind.Local).AddTicks(1632),
                            DefaultContextLength = 4096,
                            Description = "GLM 4v 文本模型",
                            Enable = true,
                            Extension = "{}",
                            Icon = "ChatGLM",
                            IsVersion2 = false,
                            Model = "glm-4v",
                            PromptRate = 15m,
                            QuotaMax = "128K",
                            QuotaType = 1,
                            Tags = "[\"\\u6587\\u672C\"]",
                            Type = "chat"
                        });
                });

            modelBuilder.Entity("Thor.Service.Domain.ModelMap", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Creator")
                        .HasColumnType("text");

                    b.Property<string>("Group")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ModelId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ModelMapItems")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Modifier")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("ModelId");

                    b.ToTable("ModelMaps");
                });

            modelBuilder.Entity("Thor.Service.Domain.Product", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Creator")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Modifier")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<long>("RemainQuota")
                        .HasColumnType("bigint");

                    b.Property<int>("Stock")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Thor.Service.Domain.ProductPurchaseRecord", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Creator")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Modifier")
                        .HasColumnType("text");

                    b.Property<string>("ProductId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("PurchaseTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<long>("RemainQuota")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Creator");

                    b.HasIndex("UserId");

                    b.ToTable("ProductPurchaseRecords");
                });

            modelBuilder.Entity("Thor.Service.Domain.RateLimitModel", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("BlackList")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Creator")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("Enable")
                        .HasColumnType("boolean");

                    b.Property<int>("Limit")
                        .HasColumnType("integer");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Modifier")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Strategy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Value")
                        .HasColumnType("integer");

                    b.Property<string>("WhiteList")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Creator");

                    b.HasIndex("Model");

                    b.ToTable("RateLimitModels");
                });

            modelBuilder.Entity("Thor.Service.Domain.RedeemCode", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Creator")
                        .HasColumnType("text");

                    b.Property<bool>("Disabled")
                        .HasColumnType("boolean");

                    b.Property<string>("Modifier")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("Quota")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("RedeemedTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("RedeemedUserId")
                        .HasColumnType("text");

                    b.Property<string>("RedeemedUserName")
                        .HasColumnType("text");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("Code");

                    b.ToTable("RedeemCodes");
                });

            modelBuilder.Entity("Thor.Service.Domain.Setting", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Private")
                        .HasColumnType("boolean");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Key");

                    b.ToTable("Settings");

                    b.HasData(
                        new
                        {
                            Key = "Setting:GeneralSetting:RechargeAddress",
                            Description = "充值地址",
                            Private = false,
                            Value = ""
                        },
                        new
                        {
                            Key = "Setting:GeneralSetting:ChatLink",
                            Description = "对话链接",
                            Private = false,
                            Value = ""
                        },
                        new
                        {
                            Key = "Setting:GeneralSetting:VidolLink",
                            Description = "Vidol 链接",
                            Private = false,
                            Value = ""
                        },
                        new
                        {
                            Key = "Setting:GeneralSetting:NewUserQuota",
                            Description = "新用户初始额度",
                            Private = true,
                            Value = "100000"
                        },
                        new
                        {
                            Key = "Setting:GeneralSetting:RequestQuota",
                            Description = "请求预扣额度",
                            Private = true,
                            Value = "2000"
                        },
                        new
                        {
                            Key = "Setting:GeneralSetting:InviteQuota",
                            Description = "邀请奖励额度",
                            Private = true,
                            Value = "100000"
                        },
                        new
                        {
                            Key = "Setting:GeneralSetting:EnableClearLog",
                            Description = "启用定时清理日志",
                            Private = true,
                            Value = "true"
                        },
                        new
                        {
                            Key = "Setting:GeneralSetting:IntervalDays",
                            Description = "间隔天数",
                            Private = true,
                            Value = "90"
                        },
                        new
                        {
                            Key = "Setting:GeneralSetting:EnableAutoCheckChannel",
                            Description = "启用自动检测渠道策略",
                            Private = true,
                            Value = "false"
                        },
                        new
                        {
                            Key = "Setting:GeneralSetting:CheckInterval",
                            Description = "检测间隔 (分钟)",
                            Private = true,
                            Value = "60"
                        },
                        new
                        {
                            Key = "Setting:GeneralSetting:AutoDisableChannel",
                            Description = "自动禁用异常渠道",
                            Private = true,
                            Value = "false"
                        },
                        new
                        {
                            Key = "Setting:GeneralSetting:AlipayNotifyUrl",
                            Description = "支付宝支付回调地址",
                            Private = false,
                            Value = "https://您的服务器地址/"
                        },
                        new
                        {
                            Key = "Setting:GeneralSetting:AlipayAppId",
                            Description = "支付宝应用APPID",
                            Private = true,
                            Value = ""
                        },
                        new
                        {
                            Key = "Setting:GeneralSetting:AlipayPrivateKey",
                            Description = "支付宝应用私钥",
                            Private = true,
                            Value = ""
                        },
                        new
                        {
                            Key = "Setting:GeneralSetting:AlipayPublicKey",
                            Description = "支付宝公钥",
                            Private = true,
                            Value = ""
                        },
                        new
                        {
                            Key = "Setting:GeneralSetting:AlipayAppCertPath",
                            Description = "支付宝AppCertPath",
                            Private = true,
                            Value = ""
                        },
                        new
                        {
                            Key = "Setting:GeneralSetting:AlipayRootCertPath",
                            Description = "支付宝AlipayRootCertPath",
                            Private = true,
                            Value = ""
                        },
                        new
                        {
                            Key = "Setting:GeneralSetting:AlipayPublicCertPath",
                            Description = "支付宝公钥证书路径",
                            Private = true,
                            Value = ""
                        },
                        new
                        {
                            Key = "Setting:SystemSetting:ServerAddress",
                            Description = "服务器地址",
                            Private = false,
                            Value = ""
                        },
                        new
                        {
                            Key = "Setting:SystemSetting:EnableRegister",
                            Description = "启用账号注册",
                            Private = false,
                            Value = "true"
                        },
                        new
                        {
                            Key = "Setting:SystemSetting:EnableGithubLogin",
                            Description = "允许Github登录",
                            Private = false,
                            Value = "true"
                        },
                        new
                        {
                            Key = "Setting:SystemSetting:GithubClientId",
                            Description = "Github Client Id",
                            Private = false,
                            Value = ""
                        },
                        new
                        {
                            Key = "Setting:SystemSetting:GithubClientSecret",
                            Description = "Github Client Secret",
                            Private = true,
                            Value = ""
                        },
                        new
                        {
                            Key = "Setting:SystemSetting:EnableGiteeLogin",
                            Description = "允许Gitee登录",
                            Private = false,
                            Value = "true"
                        },
                        new
                        {
                            Key = "Setting:SystemSetting:GiteeClientId",
                            Description = "Gitee Client Id",
                            Private = false,
                            Value = ""
                        },
                        new
                        {
                            Key = "Setting:SystemSetting:GiteeClientSecret",
                            Description = "Gitee Client Secret",
                            Private = true,
                            Value = ""
                        },
                        new
                        {
                            Key = "Setting:SystemSetting:GiteeRedirectUri",
                            Description = "Gitee redirect_uri",
                            Private = false,
                            Value = ""
                        },
                        new
                        {
                            Key = "Setting:SystemSetting:EmailAddress",
                            Description = "邮箱地址",
                            Private = true,
                            Value = ""
                        },
                        new
                        {
                            Key = "Setting:SystemSetting:EmailPassword",
                            Description = "邮箱密码",
                            Private = true,
                            Value = ""
                        },
                        new
                        {
                            Key = "Setting:SystemSetting:SmtpAddress",
                            Description = "SMTP地址",
                            Private = true,
                            Value = ""
                        },
                        new
                        {
                            Key = "Setting:SystemSetting:EnableEmailRegister",
                            Description = "启用邮箱验证注册",
                            Private = false,
                            Value = "false"
                        },
                        new
                        {
                            Key = "Setting:SystemSetting:EnableCasdoorAuth",
                            Description = "启用Casdoor 授权",
                            Private = true,
                            Value = "false"
                        },
                        new
                        {
                            Key = "Setting:SystemSetting:CasdoorEndipoint",
                            Description = "Casdoor 自定义端点",
                            Private = true,
                            Value = ""
                        },
                        new
                        {
                            Key = "Setting:SystemSetting:CasdoorClientId",
                            Description = "Casdoor Client Id",
                            Private = true,
                            Value = ""
                        },
                        new
                        {
                            Key = "Setting:SystemSetting:CasdoorClientSecret",
                            Description = "Casdoor Client Secret",
                            Private = false,
                            Value = ""
                        },
                        new
                        {
                            Key = "Setting:OtherSetting:WebTitle",
                            Description = "网站标题",
                            Private = false,
                            Value = "AIDtoNet API"
                        },
                        new
                        {
                            Key = "Setting:OtherSetting:WebLogo",
                            Description = "网站Logo地址",
                            Private = false,
                            Value = "/logo.png"
                        },
                        new
                        {
                            Key = "Setting:OtherSetting:IndexContent",
                            Description = "首页内容",
                            Private = false,
                            Value = "AI DotNet API 提供更强的兼容，将更多的AI平台接入到AI DotNet API中，让AI集成更加简单。"
                        });
                });

            modelBuilder.Entity("Thor.Service.Domain.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Avatar")
                        .HasColumnType("text");

                    b.Property<long>("ConsumeToken")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Creator")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Groups")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDisabled")
                        .HasColumnType("boolean");

                    b.Property<string>("Modifier")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PasswordHas")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("RequestCount")
                        .HasColumnType("bigint");

                    b.Property<long>("ResidualCredit")
                        .HasColumnType("bigint");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = "CA378C74-19E7-458A-918B-4DBB7AE1729D",
                            ConsumeToken = 0L,
                            CreatedAt = new DateTime(2025, 7, 15, 13, 15, 43, 361, DateTimeKind.Local).AddTicks(5538),
                            Email = "239573049@qq.com",
                            Groups = "[\"default\",\"vip\"]",
                            IsDelete = false,
                            IsDisabled = false,
                            Password = "a10d520d2dc7a790927be699cd1a9578",
                            PasswordHas = "98ea48f158c849cfa9242eca0b82f289",
                            RequestCount = 0L,
                            ResidualCredit = 1000000000L,
                            Role = "admin",
                            UserName = "admin"
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
