// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Thor.Provider;

#nullable disable

namespace Thor.Provider.MySql.Thor
{
    [DbContext(typeof(MySqlThorContext))]
    [Migration("20250715051551_CalculatePricing")]
    partial class CalculatePricing
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("Thor.Domain.Chats.ChatChannel", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("ControlAutomatically")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Creator")
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("Disable")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Extension")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Groups")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Models")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Modifier")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<string>("Other")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Quota")
                        .HasColumnType("int");

                    b.Property<long>("RemainQuota")
                        .HasColumnType("bigint");

                    b.Property<long?>("ResponseTime")
                        .HasColumnType("bigint");

                    b.Property<bool>("SupportsResponses")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("Creator");

                    b.HasIndex("Name");

                    b.ToTable("Channels");
                });

            modelBuilder.Entity("Thor.Domain.Chats.Token", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("AccessedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Creator")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("ExpiredTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Groups")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(42)
                        .HasColumnType("varchar(42)");

                    b.Property<string>("LimitModels")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Modifier")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<long>("RemainQuota")
                        .HasColumnType("bigint");

                    b.Property<bool>("UnlimitedExpired")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("UnlimitedQuota")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("UsedQuota")
                        .HasColumnType("bigint");

                    b.Property<string>("WhiteIpList")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("Creator");

                    b.HasIndex("Key");

                    b.ToTable("Tokens");

                    b.HasData(
                        new
                        {
                            Id = "CA378C74-19E7-458A-918B-4DBB7AE1729D",
                            CreatedAt = new DateTime(2025, 7, 15, 13, 15, 50, 687, DateTimeKind.Local).AddTicks(1478),
                            Creator = "CA378C74-19E7-458A-918B-4DBB7AE1729D",
                            Disabled = false,
                            Groups = "[\"default\"]",
                            IsDelete = false,
                            Key = "sk-U37b8D19fmjReFcRbhjV4DLNFPNwzpuOJmOW3B",
                            LimitModels = "[]",
                            Name = "默认Token",
                            RemainQuota = 0L,
                            UnlimitedExpired = true,
                            UnlimitedQuota = true,
                            UsedQuota = 0L,
                            WhiteIpList = "[]"
                        });
                });

            modelBuilder.Entity("Thor.Domain.Users.UserGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Creator")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("Enable")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Modifier")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<double>("Rate")
                        .HasColumnType("double");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("Creator");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("UserGroups", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("ca378c74-19e7-458a-918b-4dbb7ae1729d"),
                            Code = "default",
                            CreatedAt = new DateTime(2025, 7, 15, 13, 15, 50, 688, DateTimeKind.Local).AddTicks(5730),
                            Description = "默认用户组",
                            Enable = true,
                            Name = "默认",
                            Order = 0,
                            Rate = 1.0
                        },
                        new
                        {
                            Id = new Guid("ca378c74-19e7-458a-918b-4dbb7ae17291"),
                            Code = "vip",
                            CreatedAt = new DateTime(2025, 7, 15, 13, 15, 50, 688, DateTimeKind.Local).AddTicks(6413),
                            Description = "VIP用户组",
                            Enable = true,
                            Name = "VIP",
                            Order = 0,
                            Rate = 1.0
                        });
                });

            modelBuilder.Entity("Thor.Service.Domain.Announcement", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Creator")
                        .HasColumnType("longtext");

                    b.Property<bool>("Enabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("ExpireTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Modifier")
                        .HasColumnType("longtext");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<bool>("Pinned")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("Announcements");
                });

            modelBuilder.Entity("Thor.Service.Domain.ModelManager", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<decimal?>("AudioCacheRate")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal?>("AudioOutputRate")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal?>("AudioPromptRate")
                        .HasColumnType("decimal(65,30)");

                    b.Property<bool>("Available")
                        .HasColumnType("tinyint(1)");

                    b.Property<decimal?>("CacheHitRate")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal?>("CacheRate")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal?>("CompletionRate")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("ContextPricingTiers")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("ContextPricingTiers");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Creator")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("DefaultContextLength")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("Enable")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Extension")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Icon")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsVersion2")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Modifier")
                        .HasColumnType("longtext");

                    b.Property<decimal>("PromptRate")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("QuotaMax")
                        .HasColumnType("longtext");

                    b.Property<int>("QuotaType")
                        .HasColumnType("int");

                    b.Property<string>("Tags")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("Creator");

                    b.HasIndex("Model");

                    b.ToTable("ModelManagers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("23f7229f-a3e0-469f-8b47-7c6d634a919d"),
                            Available = true,
                            ContextPricingTiers = "[]",
                            CreatedAt = new DateTime(2025, 7, 15, 13, 15, 50, 733, DateTimeKind.Local).AddTicks(2765),
                            DefaultContextLength = 4096,
                            Description = "GPT-3.5 Turbo 文本模型",
                            Enable = true,
                            Extension = "{}",
                            Icon = "OpenAI",
                            IsVersion2 = false,
                            Model = "gpt-3.5-turbo",
                            PromptRate = 0.75m,
                            QuotaMax = "128K",
                            QuotaType = 1,
                            Tags = "[\"\\u6587\\u672C\"]",
                            Type = "chat"
                        },
                        new
                        {
                            Id = new Guid("0039c3d0-7764-411c-b160-fb3dd4154265"),
                            Available = true,
                            ContextPricingTiers = "[]",
                            CreatedAt = new DateTime(2025, 7, 15, 13, 15, 50, 733, DateTimeKind.Local).AddTicks(3017),
                            DefaultContextLength = 4096,
                            Description = "GPT-3.5 Turbo 0125 文本模型",
                            Enable = true,
                            Extension = "{}",
                            Icon = "OpenAI",
                            IsVersion2 = false,
                            Model = "gpt-3.5-turbo-0125",
                            PromptRate = 0.25m,
                            QuotaMax = "128K",
                            QuotaType = 1,
                            Tags = "[\"\\u6587\\u672C\"]",
                            Type = "chat"
                        },
                        new
                        {
                            Id = new Guid("f85acf6d-6f6c-401e-9a93-cea34d6903f2"),
                            Available = true,
                            ContextPricingTiers = "[]",
                            CreatedAt = new DateTime(2025, 7, 15, 13, 15, 50, 733, DateTimeKind.Local).AddTicks(3027),
                            DefaultContextLength = 4096,
                            Description = "GPT-3.5 Turbo 0301 文本模型",
                            Enable = true,
                            Extension = "{}",
                            Icon = "OpenAI",
                            IsVersion2 = false,
                            Model = "gpt-3.5-turbo-0301",
                            PromptRate = 0.75m,
                            QuotaMax = "128K",
                            QuotaType = 1,
                            Tags = "[\"\\u6587\\u672C\"]",
                            Type = "chat"
                        },
                        new
                        {
                            Id = new Guid("4b0608ef-e4c2-42c5-9e45-dfe91253c664"),
                            Available = true,
                            ContextPricingTiers = "[]",
                            CreatedAt = new DateTime(2025, 7, 15, 13, 15, 50, 733, DateTimeKind.Local).AddTicks(3030),
                            DefaultContextLength = 4096,
                            Description = "GPT-3.5 Turbo 0613 文本模型",
                            Enable = true,
                            Extension = "{}",
                            Icon = "OpenAI",
                            IsVersion2 = false,
                            Model = "gpt-3.5-turbo-0613",
                            PromptRate = 0.75m,
                            QuotaMax = "128K",
                            QuotaType = 1,
                            Tags = "[\"\\u6587\\u672C\"]",
                            Type = "chat"
                        },
                        new
                        {
                            Id = new Guid("aa2a4f30-44d3-4a46-89bf-f17e4da95af4"),
                            Available = true,
                            ContextPricingTiers = "[]",
                            CreatedAt = new DateTime(2025, 7, 15, 13, 15, 50, 733, DateTimeKind.Local).AddTicks(3030),
                            DefaultContextLength = 4096,
                            Description = "GPT-3.5 Turbo 1106 文本模型",
                            Enable = true,
                            Extension = "{}",
                            Icon = "OpenAI",
                            IsVersion2 = false,
                            Model = "gpt-3.5-turbo-1106",
                            PromptRate = 0.25m,
                            QuotaMax = "128K",
                            QuotaType = 1,
                            Tags = "[\"\\u6587\\u672C\"]",
                            Type = "chat"
                        },
                        new
                        {
                            Id = new Guid("dd0a7917-cc48-470e-a24e-ed9b3f3b0f90"),
                            Available = true,
                            ContextPricingTiers = "[]",
                            CreatedAt = new DateTime(2025, 7, 15, 13, 15, 50, 733, DateTimeKind.Local).AddTicks(3031),
                            DefaultContextLength = 4096,
                            Description = "GPT-3.5 Turbo 16k 文本模型",
                            Enable = true,
                            Extension = "{}",
                            Icon = "OpenAI",
                            IsVersion2 = false,
                            Model = "gpt-3.5-turbo-16k",
                            PromptRate = 0.75m,
                            QuotaMax = "16K",
                            QuotaType = 1,
                            Tags = "[\"\\u6587\\u672C\"]",
                            Type = "chat"
                        },
                        new
                        {
                            Id = new Guid("91713774-1d68-4b46-b95c-ba2bc5a940a0"),
                            Available = true,
                            ContextPricingTiers = "[]",
                            CreatedAt = new DateTime(2025, 7, 15, 13, 15, 50, 733, DateTimeKind.Local).AddTicks(3032),
                            DefaultContextLength = 4096,
                            Description = "GPT-3.5 Turbo 16k 0613 文本模型",
                            Enable = true,
                            Extension = "{}",
                            Icon = "OpenAI",
                            IsVersion2 = false,
                            Model = "gpt-3.5-turbo-16k-0613",
                            PromptRate = 0.75m,
                            QuotaMax = "16K",
                            QuotaType = 1,
                            Tags = "[\"\\u6587\\u672C\"]",
                            Type = "chat"
                        },
                        new
                        {
                            Id = new Guid("290a1043-3063-4086-a7f8-a44309baba17"),
                            Available = true,
                            ContextPricingTiers = "[]",
                            CreatedAt = new DateTime(2025, 7, 15, 13, 15, 50, 733, DateTimeKind.Local).AddTicks(3037),
                            DefaultContextLength = 4096,
                            Description = "GPT-3.5 Turbo Instruct 文本模型",
                            Enable = true,
                            Extension = "{}",
                            Icon = "OpenAI",
                            IsVersion2 = false,
                            Model = "gpt-3.5-turbo-instruct",
                            PromptRate = 0.001m,
                            QuotaMax = "128K",
                            QuotaType = 1,
                            Tags = "[\"\\u6587\\u672C\"]",
                            Type = "chat"
                        },
                        new
                        {
                            Id = new Guid("3418d67b-a30c-4cc8-bc8e-81c743f370eb"),
                            Available = true,
                            ContextPricingTiers = "[]",
                            CreatedAt = new DateTime(2025, 7, 15, 13, 15, 50, 733, DateTimeKind.Local).AddTicks(3037),
                            DefaultContextLength = 4096,
                            Description = "GPT-4 文本模型",
                            Enable = true,
                            Extension = "{}",
                            Icon = "OpenAI",
                            IsVersion2 = false,
                            Model = "gpt-4",
                            PromptRate = 15m,
                            QuotaMax = "128K",
                            QuotaType = 1,
                            Tags = "[\"\\u6587\\u672C\"]",
                            Type = "chat"
                        },
                        new
                        {
                            Id = new Guid("9f86b920-606b-4b76-9b3c-66455f58ba88"),
                            Available = true,
                            ContextPricingTiers = "[]",
                            CreatedAt = new DateTime(2025, 7, 15, 13, 15, 50, 733, DateTimeKind.Local).AddTicks(3038),
                            DefaultContextLength = 4096,
                            Description = "GPT-4 0125 预览文本模型",
                            Enable = true,
                            Extension = "{}",
                            Icon = "OpenAI",
                            IsVersion2 = false,
                            Model = "gpt-4-0125-preview",
                            PromptRate = 5m,
                            QuotaMax = "128K",
                            QuotaType = 1,
                            Tags = "[\"\\u6587\\u672C\"]",
                            Type = "chat"
                        },
                        new
                        {
                            Id = new Guid("838af773-4b99-4477-9b55-26cf62af82b4"),
                            Available = true,
                            ContextPricingTiers = "[]",
                            CreatedAt = new DateTime(2025, 7, 15, 13, 15, 50, 733, DateTimeKind.Local).AddTicks(3041),
                            DefaultContextLength = 4096,
                            Description = "GPT-4 0314 文本模型",
                            Enable = true,
                            Extension = "{}",
                            Icon = "OpenAI",
                            IsVersion2 = false,
                            Model = "gpt-4-0314",
                            PromptRate = 15m,
                            QuotaMax = "128K",
                            QuotaType = 1,
                            Tags = "[\"\\u6587\\u672C\"]",
                            Type = "chat"
                        },
                        new
                        {
                            Id = new Guid("5f5b842b-694f-493e-805d-f9cf1b3b2ce1"),
                            Available = true,
                            ContextPricingTiers = "[]",
                            CreatedAt = new DateTime(2025, 7, 15, 13, 15, 50, 733, DateTimeKind.Local).AddTicks(3042),
                            DefaultContextLength = 4096,
                            Description = "GPT-4 0613 文本模型",
                            Enable = true,
                            Extension = "{}",
                            Icon = "OpenAI",
                            IsVersion2 = false,
                            Model = "gpt-4-0613",
                            PromptRate = 15m,
                            QuotaMax = "128K",
                            QuotaType = 1,
                            Tags = "[\"\\u6587\\u672C\"]",
                            Type = "chat"
                        },
                        new
                        {
                            Id = new Guid("7db8b72a-b39d-49aa-b2eb-a8b20223373d"),
                            Available = true,
                            ContextPricingTiers = "[]",
                            CreatedAt = new DateTime(2025, 7, 15, 13, 15, 50, 733, DateTimeKind.Local).AddTicks(3042),
                            DefaultContextLength = 4096,
                            Description = "GPT-4 1106 预览文本模型",
                            Enable = true,
                            Extension = "{}",
                            Icon = "OpenAI",
                            IsVersion2 = false,
                            Model = "gpt-4-1106-preview",
                            PromptRate = 5m,
                            QuotaMax = "128K",
                            QuotaType = 1,
                            Tags = "[\"\\u6587\\u672C\"]",
                            Type = "chat"
                        },
                        new
                        {
                            Id = new Guid("a8db260a-b8c1-4f49-94ac-c422453340e3"),
                            Available = true,
                            ContextPricingTiers = "[]",
                            CreatedAt = new DateTime(2025, 7, 15, 13, 15, 50, 733, DateTimeKind.Local).AddTicks(3043),
                            DefaultContextLength = 4096,
                            Description = "GPT-4 1106 视觉预览模型",
                            Enable = true,
                            Extension = "{}",
                            Icon = "OpenAI",
                            IsVersion2 = false,
                            Model = "gpt-4-1106-vision-preview",
                            PromptRate = 10m,
                            QuotaMax = "128K",
                            QuotaType = 1,
                            Tags = "[\"\\u89C6\\u89C9\",\"\\u6587\\u672C\"]",
                            Type = "chat"
                        },
                        new
                        {
                            Id = new Guid("84fb7beb-1811-4749-bd44-c4449cd77ef4"),
                            Available = true,
                            ContextPricingTiers = "[]",
                            CreatedAt = new DateTime(2025, 7, 15, 13, 15, 50, 733, DateTimeKind.Local).AddTicks(3044),
                            DefaultContextLength = 4096,
                            Description = "GPT-4 32k 文本模型",
                            Enable = true,
                            Extension = "{}",
                            Icon = "OpenAI",
                            IsVersion2 = false,
                            Model = "gpt-4-32k",
                            PromptRate = 30m,
                            QuotaMax = "32K",
                            QuotaType = 1,
                            Tags = "[\"\\u6587\\u672C\"]",
                            Type = "chat"
                        },
                        new
                        {
                            Id = new Guid("7e2e0557-1579-4195-a383-5c7fa567f1e4"),
                            Available = true,
                            ContextPricingTiers = "[]",
                            CreatedAt = new DateTime(2025, 7, 15, 13, 15, 50, 733, DateTimeKind.Local).AddTicks(3045),
                            DefaultContextLength = 4096,
                            Description = "GPT-4 32k 0314 文本模型",
                            Enable = true,
                            Extension = "{}",
                            Icon = "OpenAI",
                            IsVersion2 = false,
                            Model = "gpt-4-32k-0314",
                            PromptRate = 30m,
                            QuotaMax = "32K",
                            QuotaType = 1,
                            Tags = "[\"\\u6587\\u672C\"]",
                            Type = "chat"
                        },
                        new
                        {
                            Id = new Guid("c220c969-05ad-4f46-a5e8-5ade10b4ba63"),
                            Available = true,
                            ContextPricingTiers = "[]",
                            CreatedAt = new DateTime(2025, 7, 15, 13, 15, 50, 733, DateTimeKind.Local).AddTicks(3045),
                            DefaultContextLength = 4096,
                            Description = "GPT-4 32k 0613 文本模型",
                            Enable = true,
                            Extension = "{}",
                            Icon = "OpenAI",
                            IsVersion2 = false,
                            Model = "gpt-4-32k-0613",
                            PromptRate = 30m,
                            QuotaMax = "32K",
                            QuotaType = 1,
                            Tags = "[\"\\u6587\\u672C\"]",
                            Type = "chat"
                        },
                        new
                        {
                            Id = new Guid("7bfff9f6-66e6-476d-9574-016e8077b149"),
                            Available = true,
                            ContextPricingTiers = "[]",
                            CreatedAt = new DateTime(2025, 7, 15, 13, 15, 50, 733, DateTimeKind.Local).AddTicks(3046),
                            DefaultContextLength = 4096,
                            Description = "GPT-4 全部文本模型",
                            Enable = true,
                            Extension = "{}",
                            Icon = "OpenAI",
                            IsVersion2 = false,
                            Model = "gpt-4-all",
                            PromptRate = 30m,
                            QuotaMax = "128K",
                            QuotaType = 1,
                            Tags = "[\"\\u6587\\u672C\",\"\\u89C6\\u89C9\",\"\\u8054\\u7F51\"]",
                            Type = "chat"
                        },
                        new
                        {
                            Id = new Guid("ea3082ed-2554-4f7c-befd-6a180c89b590"),
                            Available = true,
                            ContextPricingTiers = "[]",
                            CreatedAt = new DateTime(2025, 7, 15, 13, 15, 50, 733, DateTimeKind.Local).AddTicks(3049),
                            DefaultContextLength = 4096,
                            Description = "GPT-4 Turbo 文本模型",
                            Enable = true,
                            Extension = "{}",
                            Icon = "OpenAI",
                            IsVersion2 = false,
                            Model = "gpt-4-turbo",
                            PromptRate = 5m,
                            QuotaMax = "128K",
                            QuotaType = 1,
                            Tags = "[\"\\u6587\\u672C\"]",
                            Type = "chat"
                        },
                        new
                        {
                            Id = new Guid("6cb1b062-8ecd-4950-a4e9-53c21f18a7c5"),
                            Available = true,
                            CompletionRate = 2m,
                            ContextPricingTiers = "[]",
                            CreatedAt = new DateTime(2025, 7, 15, 13, 15, 50, 733, DateTimeKind.Local).AddTicks(3050),
                            DefaultContextLength = 4096,
                            Description = "Gemini 1.5 Pro 文本模型",
                            Enable = true,
                            Extension = "{}",
                            Icon = "Google",
                            IsVersion2 = false,
                            Model = "gemini-1.5-pro",
                            PromptRate = 2m,
                            QuotaMax = "128K",
                            QuotaType = 1,
                            Tags = "[\"\\u6587\\u672C\"]",
                            Type = "chat"
                        },
                        new
                        {
                            Id = new Guid("bda20f11-dc72-4936-9182-2db1d6c470e3"),
                            Available = true,
                            CompletionRate = 3m,
                            ContextPricingTiers = "[]",
                            CreatedAt = new DateTime(2025, 7, 15, 13, 15, 50, 733, DateTimeKind.Local).AddTicks(3051),
                            DefaultContextLength = 4096,
                            Description = "Gemini Pro 文本模型",
                            Enable = true,
                            Extension = "{}",
                            Icon = "Google",
                            IsVersion2 = false,
                            Model = "gemini-pro",
                            PromptRate = 2m,
                            QuotaMax = "128K",
                            QuotaType = 1,
                            Tags = "[\"\\u6587\\u672C\"]",
                            Type = "chat"
                        },
                        new
                        {
                            Id = new Guid("68dc046e-4e9f-499f-8df7-873c6b3136e1"),
                            Available = true,
                            CompletionRate = 3m,
                            ContextPricingTiers = "[]",
                            CreatedAt = new DateTime(2025, 7, 15, 13, 15, 50, 733, DateTimeKind.Local).AddTicks(3052),
                            DefaultContextLength = 4096,
                            Description = "Gemini Pro 视觉模型",
                            Enable = true,
                            Extension = "{}",
                            Icon = "Google",
                            IsVersion2 = false,
                            Model = "gemini-pro-vision",
                            PromptRate = 2m,
                            QuotaMax = "128K",
                            QuotaType = 1,
                            Tags = "[\"\\u6587\\u672C\",\"\\u89C6\\u89C9\"]",
                            Type = "chat"
                        },
                        new
                        {
                            Id = new Guid("1c65bb8b-9d97-49d6-b5a0-eaa6e4061027"),
                            Available = true,
                            CompletionRate = 3m,
                            ContextPricingTiers = "[]",
                            CreatedAt = new DateTime(2025, 7, 15, 13, 15, 50, 733, DateTimeKind.Local).AddTicks(3053),
                            DefaultContextLength = 4096,
                            Description = "Gemini 1.5 Flash 文本模型",
                            Enable = true,
                            Extension = "{}",
                            Icon = "Google",
                            IsVersion2 = false,
                            Model = "gemini-1.5-flash",
                            PromptRate = 0.2m,
                            QuotaMax = "128K",
                            QuotaType = 1,
                            Tags = "[\"\\u6587\\u672C\"]",
                            Type = "chat"
                        },
                        new
                        {
                            Id = new Guid("f63ad9f9-eaa8-4f29-90a3-4b677887b095"),
                            Available = true,
                            ContextPricingTiers = "[]",
                            CreatedAt = new DateTime(2025, 7, 15, 13, 15, 50, 733, DateTimeKind.Local).AddTicks(3054),
                            DefaultContextLength = 4096,
                            Description = "GPT-4 Turbo 2024-04-09 文本模型",
                            Enable = true,
                            Extension = "{}",
                            Icon = "OpenAI",
                            IsVersion2 = false,
                            Model = "gpt-4-turbo-2024-04-09",
                            PromptRate = 5m,
                            QuotaMax = "128K",
                            QuotaType = 1,
                            Tags = "[\"\\u6587\\u672C\"]",
                            Type = "chat"
                        },
                        new
                        {
                            Id = new Guid("a778f553-e1fc-4463-96be-1d4495a41339"),
                            Available = true,
                            ContextPricingTiers = "[]",
                            CreatedAt = new DateTime(2025, 7, 15, 13, 15, 50, 733, DateTimeKind.Local).AddTicks(3054),
                            DefaultContextLength = 4096,
                            Description = "GPT-4 Turbo 预览文本模型",
                            Enable = true,
                            Extension = "{}",
                            Icon = "OpenAI",
                            IsVersion2 = false,
                            Model = "gpt-4-turbo-preview",
                            PromptRate = 5m,
                            QuotaMax = "8K",
                            QuotaType = 1,
                            Tags = "[\"\\u6587\\u672C\",\"\\u89C6\\u89C9\"]",
                            Type = "chat"
                        },
                        new
                        {
                            Id = new Guid("e15e0171-378b-49bd-8975-3613fae1c9cc"),
                            Available = true,
                            ContextPricingTiers = "[]",
                            CreatedAt = new DateTime(2025, 7, 15, 13, 15, 50, 733, DateTimeKind.Local).AddTicks(3055),
                            DefaultContextLength = 4096,
                            Description = "GPT-4 视觉预览模型",
                            Enable = true,
                            Extension = "{}",
                            Icon = "OpenAI",
                            IsVersion2 = false,
                            Model = "gpt-4-vision-preview",
                            PromptRate = 10m,
                            QuotaMax = "8K",
                            QuotaType = 1,
                            Tags = "[\"\\u6587\\u672C\",\"\\u89C6\\u89C9\"]",
                            Type = "chat"
                        },
                        new
                        {
                            Id = new Guid("8c61a1b5-12c6-43e8-9700-350a98490391"),
                            Available = true,
                            CompletionRate = 3m,
                            ContextPricingTiers = "[]",
                            CreatedAt = new DateTime(2025, 7, 15, 13, 15, 50, 733, DateTimeKind.Local).AddTicks(3058),
                            DefaultContextLength = 4096,
                            Description = "GPT-4o 文本模型",
                            Enable = true,
                            Extension = "{}",
                            Icon = "OpenAI",
                            IsVersion2 = false,
                            Model = "gpt-4o",
                            PromptRate = 3m,
                            QuotaMax = "128K",
                            QuotaType = 1,
                            Tags = "[\"\\u6587\\u672C\",\"\\u89C6\\u89C9\",\"\\u97F3\\u9891\"]",
                            Type = "chat"
                        },
                        new
                        {
                            Id = new Guid("fac8f4b0-c097-4b07-ae40-a280274e1f2d"),
                            Available = true,
                            CompletionRate = 4m,
                            ContextPricingTiers = "[]",
                            CreatedAt = new DateTime(2025, 7, 15, 13, 15, 50, 733, DateTimeKind.Local).AddTicks(3059),
                            DefaultContextLength = 4096,
                            Description = "ChatGPT 4o 最新文本模型",
                            Enable = true,
                            Extension = "{}",
                            Icon = "OpenAI",
                            IsVersion2 = false,
                            Model = "chatgpt-4o-latest",
                            PromptRate = 3m,
                            QuotaMax = "128K",
                            QuotaType = 1,
                            Tags = "[\"\\u6587\\u672C\",\"\\u89C6\\u89C9\",\"\\u97F3\\u9891\"]",
                            Type = "chat"
                        },
                        new
                        {
                            Id = new Guid("ede4795c-115f-41e7-bba7-81a3567e3ed4"),
                            Available = true,
                            CompletionRate = 4m,
                            ContextPricingTiers = "[]",
                            CreatedAt = new DateTime(2025, 7, 15, 13, 15, 50, 733, DateTimeKind.Local).AddTicks(3060),
                            DefaultContextLength = 4096,
                            Description = "GPT-4o Mini 文本模型",
                            Enable = true,
                            Extension = "{}",
                            Icon = "OpenAI",
                            IsVersion2 = false,
                            Model = "gpt-4o-mini",
                            PromptRate = 0.07m,
                            QuotaMax = "128K",
                            QuotaType = 1,
                            Tags = "[\"\\u6587\\u672C\",\"\\u89C6\\u89C9\",\"\\u97F3\\u9891\"]",
                            Type = "chat"
                        },
                        new
                        {
                            Id = new Guid("9a008f32-5d8d-44c1-b09b-4805ecc02882"),
                            Available = true,
                            CompletionRate = 4m,
                            ContextPricingTiers = "[]",
                            CreatedAt = new DateTime(2025, 7, 15, 13, 15, 50, 733, DateTimeKind.Local).AddTicks(3060),
                            DefaultContextLength = 4096,
                            Description = "GPT-4o Mini 2024-07-18 文本模型",
                            Enable = true,
                            Extension = "{}",
                            Icon = "OpenAI",
                            IsVersion2 = false,
                            Model = "gpt-4o-mini-2024-07-18",
                            PromptRate = 0.07m,
                            QuotaMax = "128K",
                            QuotaType = 1,
                            Tags = "[\"\\u6587\\u672C\",\"\\u89C6\\u89C9\",\"\\u97F3\\u9891\"]",
                            Type = "chat"
                        },
                        new
                        {
                            Id = new Guid("0e3b18fa-8775-4343-b767-ee98ca965d1e"),
                            Available = true,
                            CompletionRate = 4m,
                            ContextPricingTiers = "[]",
                            CreatedAt = new DateTime(2025, 7, 15, 13, 15, 50, 733, DateTimeKind.Local).AddTicks(3061),
                            DefaultContextLength = 4096,
                            Description = "GPT-4o 2024-05-13 文本模型",
                            Enable = true,
                            Extension = "{}",
                            Icon = "OpenAI",
                            IsVersion2 = false,
                            Model = "gpt-4o-2024-05-13",
                            PromptRate = 3m,
                            QuotaMax = "128K",
                            QuotaType = 1,
                            Tags = "[\"\\u6587\\u672C\",\"\\u89C6\\u89C9\",\"\\u97F3\\u9891\"]",
                            Type = "chat"
                        },
                        new
                        {
                            Id = new Guid("91b730c6-fcad-46d4-b9f3-b6fe84517e41"),
                            Available = true,
                            CompletionRate = 4m,
                            ContextPricingTiers = "[]",
                            CreatedAt = new DateTime(2025, 7, 15, 13, 15, 50, 733, DateTimeKind.Local).AddTicks(3063),
                            DefaultContextLength = 4096,
                            Description = "GPT-4o 2024-08-06 文本模型",
                            Enable = true,
                            Extension = "{}",
                            Icon = "OpenAI",
                            IsVersion2 = false,
                            Model = "gpt-4o-2024-08-06",
                            PromptRate = 1.25m,
                            QuotaMax = "128K",
                            QuotaType = 1,
                            Tags = "[\"\\u6587\\u672C\",\"\\u89C6\\u89C9\",\"\\u97F3\\u9891\"]",
                            Type = "chat"
                        },
                        new
                        {
                            Id = new Guid("329d6727-ee42-44d1-bab7-f7ce60f2f498"),
                            Available = true,
                            ContextPricingTiers = "[]",
                            CreatedAt = new DateTime(2025, 7, 15, 13, 15, 50, 733, DateTimeKind.Local).AddTicks(3064),
                            DefaultContextLength = 4096,
                            Description = "Moonshot v1 128k 文本模型",
                            Enable = true,
                            Extension = "{}",
                            Icon = "Moonshot",
                            IsVersion2 = false,
                            Model = "moonshot-v1-128k",
                            PromptRate = 5.06m,
                            QuotaMax = "128K",
                            QuotaType = 1,
                            Tags = "[\"\\u6587\\u672C\"]",
                            Type = "chat"
                        },
                        new
                        {
                            Id = new Guid("9546d345-77a4-4f2c-acd7-b2ee3da73964"),
                            Available = true,
                            ContextPricingTiers = "[]",
                            CreatedAt = new DateTime(2025, 7, 15, 13, 15, 50, 733, DateTimeKind.Local).AddTicks(3065),
                            DefaultContextLength = 4096,
                            Description = "Moonshot v1 32k 文本模型",
                            Enable = true,
                            Extension = "{}",
                            Icon = "Moonshot",
                            IsVersion2 = false,
                            Model = "moonshot-v1-32k",
                            PromptRate = 2m,
                            QuotaMax = "32K",
                            QuotaType = 1,
                            Tags = "[\"\\u6587\\u672C\"]",
                            Type = "chat"
                        },
                        new
                        {
                            Id = new Guid("9f277c35-932c-409d-acbb-d3371b86e3e4"),
                            Available = true,
                            ContextPricingTiers = "[]",
                            CreatedAt = new DateTime(2025, 7, 15, 13, 15, 50, 733, DateTimeKind.Local).AddTicks(3067),
                            DefaultContextLength = 4096,
                            Description = "Moonshot v1 8k 文本模型",
                            Enable = true,
                            Extension = "{}",
                            Icon = "Moonshot",
                            IsVersion2 = false,
                            Model = "moonshot-v1-8k",
                            PromptRate = 1m,
                            QuotaMax = "8K",
                            QuotaType = 1,
                            Tags = "[\"\\u6587\\u672C\"]",
                            Type = "chat"
                        },
                        new
                        {
                            Id = new Guid("4108d94e-29a7-4a04-aaf4-83f33143a588"),
                            Available = true,
                            ContextPricingTiers = "[]",
                            CreatedAt = new DateTime(2025, 7, 15, 13, 15, 50, 733, DateTimeKind.Local).AddTicks(3068),
                            DefaultContextLength = 4096,
                            Description = "Text Babbage 001 文本模型",
                            Enable = true,
                            Extension = "{}",
                            Icon = "OpenAI",
                            IsVersion2 = false,
                            Model = "text-babbage-001",
                            PromptRate = 0.25m,
                            QuotaMax = "8K",
                            QuotaType = 1,
                            Tags = "[\"\\u6587\\u672C\"]",
                            Type = "chat"
                        },
                        new
                        {
                            Id = new Guid("d248e7c2-1c49-4c90-9f6b-7df7e9cf8fa1"),
                            Available = true,
                            ContextPricingTiers = "[]",
                            CreatedAt = new DateTime(2025, 7, 15, 13, 15, 50, 733, DateTimeKind.Local).AddTicks(3069),
                            DefaultContextLength = 4096,
                            Description = "Text Curie 001 文本模型",
                            Enable = true,
                            Extension = "{}",
                            Icon = "OpenAI",
                            IsVersion2 = false,
                            Model = "text-curie-001",
                            PromptRate = 1m,
                            QuotaMax = "128K",
                            QuotaType = 1,
                            Tags = "[\"\\u6587\\u672C\"]",
                            Type = "chat"
                        },
                        new
                        {
                            Id = new Guid("5d308a2d-e1ea-4fb9-892e-7c2c7e52bcd8"),
                            Available = true,
                            ContextPricingTiers = "[]",
                            CreatedAt = new DateTime(2025, 7, 15, 13, 15, 50, 733, DateTimeKind.Local).AddTicks(3069),
                            DefaultContextLength = 4096,
                            Description = "Text Davinci 002 文本模型",
                            Enable = true,
                            Extension = "{}",
                            Icon = "OpenAI",
                            IsVersion2 = false,
                            Model = "text-davinci-002",
                            PromptRate = 10m,
                            QuotaMax = "128K",
                            QuotaType = 1,
                            Tags = "[\"\\u6587\\u672C\"]",
                            Type = "chat"
                        },
                        new
                        {
                            Id = new Guid("56b449f9-895e-4f53-9b58-e67fdf2e6335"),
                            Available = true,
                            ContextPricingTiers = "[]",
                            CreatedAt = new DateTime(2025, 7, 15, 13, 15, 50, 733, DateTimeKind.Local).AddTicks(3070),
                            DefaultContextLength = 4096,
                            Description = "Text Davinci 003 文本模型",
                            Enable = true,
                            Extension = "{}",
                            Icon = "OpenAI",
                            IsVersion2 = false,
                            Model = "text-davinci-003",
                            PromptRate = 10m,
                            QuotaMax = "8K",
                            QuotaType = 1,
                            Tags = "[\"\\u6587\\u672C\"]",
                            Type = "chat"
                        },
                        new
                        {
                            Id = new Guid("1aa9341e-6516-40e6-a824-f0afb0554085"),
                            Available = true,
                            ContextPricingTiers = "[]",
                            CreatedAt = new DateTime(2025, 7, 15, 13, 15, 50, 733, DateTimeKind.Local).AddTicks(3071),
                            DefaultContextLength = 4096,
                            Description = "Text Davinci Edit 001 文本模型",
                            Enable = true,
                            Extension = "{}",
                            Icon = "OpenAI",
                            IsVersion2 = false,
                            Model = "text-davinci-edit-001",
                            PromptRate = 10m,
                            QuotaMax = "8K",
                            QuotaType = 1,
                            Tags = "[\"\\u6587\\u672C\"]",
                            Type = "chat"
                        },
                        new
                        {
                            Id = new Guid("c4092067-3903-4c1c-b180-0e31c1efd2d8"),
                            Available = true,
                            ContextPricingTiers = "[]",
                            CreatedAt = new DateTime(2025, 7, 15, 13, 15, 50, 733, DateTimeKind.Local).AddTicks(3072),
                            DefaultContextLength = 4096,
                            Description = "Text Embedding 3 Large 嵌入模型",
                            Enable = true,
                            Extension = "{}",
                            Icon = "OpenAI",
                            IsVersion2 = false,
                            Model = "text-embedding-3-large",
                            PromptRate = 0.13m,
                            QuotaMax = "8K",
                            QuotaType = 1,
                            Tags = "[\"\\u6587\\u672C\"]",
                            Type = "embedding"
                        },
                        new
                        {
                            Id = new Guid("573d0038-2a76-4f78-8484-e7e632fb54b4"),
                            Available = true,
                            ContextPricingTiers = "[]",
                            CreatedAt = new DateTime(2025, 7, 15, 13, 15, 50, 733, DateTimeKind.Local).AddTicks(3073),
                            DefaultContextLength = 4096,
                            Description = "Text Embedding 3 Small 嵌入模型",
                            Enable = true,
                            Extension = "{}",
                            Icon = "OpenAI",
                            IsVersion2 = false,
                            Model = "text-embedding-3-small",
                            PromptRate = 0.1m,
                            QuotaMax = "8K",
                            QuotaType = 1,
                            Tags = "[\"\\u6587\\u672C\"]",
                            Type = "embedding"
                        },
                        new
                        {
                            Id = new Guid("9bda30fa-98a0-4d0c-bc29-5dbb5871b5c7"),
                            Available = true,
                            ContextPricingTiers = "[]",
                            CreatedAt = new DateTime(2025, 7, 15, 13, 15, 50, 733, DateTimeKind.Local).AddTicks(3075),
                            DefaultContextLength = 4096,
                            Description = "Text Embedding Ada 002 嵌入模型",
                            Enable = true,
                            Extension = "{}",
                            Icon = "OpenAI",
                            IsVersion2 = false,
                            Model = "text-embedding-ada-002",
                            PromptRate = 0.1m,
                            QuotaMax = "8K",
                            QuotaType = 1,
                            Tags = "[\"\\u6587\\u672C\"]",
                            Type = "embedding"
                        },
                        new
                        {
                            Id = new Guid("245abedd-25b6-4d00-b7bc-eefe9e39c099"),
                            Available = true,
                            ContextPricingTiers = "[]",
                            CreatedAt = new DateTime(2025, 7, 15, 13, 15, 50, 733, DateTimeKind.Local).AddTicks(3075),
                            DefaultContextLength = 4096,
                            Description = "TTS 1 语音合成模型",
                            Enable = true,
                            Extension = "{}",
                            Icon = "OpenAI",
                            IsVersion2 = false,
                            Model = "tts-1",
                            PromptRate = 7.5m,
                            QuotaType = 1,
                            Tags = "[\"\\u97F3\\u9891\"]",
                            Type = "tts"
                        },
                        new
                        {
                            Id = new Guid("2e0b6dd4-b797-4e5a-86a2-7678a1b24bbe"),
                            Available = true,
                            ContextPricingTiers = "[]",
                            CreatedAt = new DateTime(2025, 7, 15, 13, 15, 50, 733, DateTimeKind.Local).AddTicks(3076),
                            DefaultContextLength = 4096,
                            Description = "TTS 1 1106 语音合成模型",
                            Enable = true,
                            Extension = "{}",
                            Icon = "OpenAI",
                            IsVersion2 = false,
                            Model = "tts-1-1106",
                            PromptRate = 7.5m,
                            QuotaType = 1,
                            Tags = "[\"\\u97F3\\u9891\"]",
                            Type = "tts"
                        },
                        new
                        {
                            Id = new Guid("59eb6371-8f9f-4eb9-bc92-2e0a9b458cd6"),
                            Available = true,
                            ContextPricingTiers = "[]",
                            CreatedAt = new DateTime(2025, 7, 15, 13, 15, 50, 733, DateTimeKind.Local).AddTicks(3078),
                            DefaultContextLength = 4096,
                            Description = "TTS 1 HD 语音合成模型",
                            Enable = true,
                            Extension = "{}",
                            Icon = "OpenAI",
                            IsVersion2 = false,
                            Model = "tts-1-hd",
                            PromptRate = 15m,
                            QuotaType = 2,
                            Tags = "[\"\\u97F3\\u9891\"]",
                            Type = "tts"
                        },
                        new
                        {
                            Id = new Guid("3b86af6f-fcf8-4ae9-9c73-54c018d5111c"),
                            Available = true,
                            ContextPricingTiers = "[]",
                            CreatedAt = new DateTime(2025, 7, 15, 13, 15, 50, 733, DateTimeKind.Local).AddTicks(3079),
                            DefaultContextLength = 4096,
                            Description = "TTS 1 HD 1106 语音合成模型",
                            Enable = true,
                            Extension = "{}",
                            Icon = "OpenAI",
                            IsVersion2 = false,
                            Model = "tts-1-hd-1106",
                            PromptRate = 15m,
                            QuotaType = 2,
                            Tags = "[\"\\u97F3\\u9891\"]",
                            Type = "tts"
                        },
                        new
                        {
                            Id = new Guid("d9900260-007d-444c-a053-7a8b881ca0a5"),
                            Available = true,
                            ContextPricingTiers = "[]",
                            CreatedAt = new DateTime(2025, 7, 15, 13, 15, 50, 733, DateTimeKind.Local).AddTicks(3080),
                            DefaultContextLength = 4096,
                            Description = "Whisper 1 语音识别模型",
                            Enable = true,
                            Extension = "{}",
                            Icon = "OpenAI",
                            IsVersion2 = false,
                            Model = "whisper-1",
                            PromptRate = 15m,
                            QuotaType = 2,
                            Tags = "[\"\\u97F3\\u9891\"]",
                            Type = "stt"
                        },
                        new
                        {
                            Id = new Guid("67fa9561-77e2-4edb-bdca-0b96a2a33e68"),
                            Available = true,
                            ContextPricingTiers = "[]",
                            CreatedAt = new DateTime(2025, 7, 15, 13, 15, 50, 733, DateTimeKind.Local).AddTicks(3081),
                            DefaultContextLength = 4096,
                            Description = "Hunyuan Lite 文本模型",
                            Enable = true,
                            Extension = "{}",
                            Icon = "Hunyuan",
                            IsVersion2 = false,
                            Model = "hunyuan-lite",
                            PromptRate = 0.75m,
                            QuotaMax = "128K",
                            QuotaType = 1,
                            Tags = "[\"\\u6587\\u672C\"]",
                            Type = "chat"
                        },
                        new
                        {
                            Id = new Guid("e670e8c7-2c82-44fb-96d0-f1d6941c140a"),
                            Available = true,
                            CompletionRate = 2m,
                            ContextPricingTiers = "[]",
                            CreatedAt = new DateTime(2025, 7, 15, 13, 15, 50, 733, DateTimeKind.Local).AddTicks(3082),
                            DefaultContextLength = 4096,
                            Description = "通用文本模型",
                            Enable = true,
                            Extension = "{}",
                            Icon = "Spark",
                            IsVersion2 = false,
                            Model = "general",
                            PromptRate = 2m,
                            QuotaMax = "128K",
                            QuotaType = 1,
                            Tags = "[\"\\u6587\\u672C\"]",
                            Type = "chat"
                        },
                        new
                        {
                            Id = new Guid("1eb56aec-f03c-4b9e-a587-f96adc5a0943"),
                            Available = true,
                            CompletionRate = 2m,
                            ContextPricingTiers = "[]",
                            CreatedAt = new DateTime(2025, 7, 15, 13, 15, 50, 733, DateTimeKind.Local).AddTicks(3084),
                            DefaultContextLength = 4096,
                            Description = "通用文本模型 v3",
                            Enable = true,
                            Extension = "{}",
                            Icon = "Spark",
                            IsVersion2 = false,
                            Model = "generalv3",
                            PromptRate = 2m,
                            QuotaMax = "128K",
                            QuotaType = 1,
                            Tags = "[\"\\u6587\\u672C\"]",
                            Type = "chat"
                        },
                        new
                        {
                            Id = new Guid("73940df6-8b81-48fd-ac47-a1b2a5e70efa"),
                            Available = true,
                            CompletionRate = 2m,
                            ContextPricingTiers = "[]",
                            CreatedAt = new DateTime(2025, 7, 15, 13, 15, 50, 733, DateTimeKind.Local).AddTicks(3086),
                            DefaultContextLength = 4096,
                            Description = "通用文本模型 v3.5",
                            Enable = true,
                            Extension = "{}",
                            Icon = "Spark",
                            IsVersion2 = false,
                            Model = "generalv3.5",
                            PromptRate = 2m,
                            QuotaMax = "128K",
                            QuotaType = 1,
                            Tags = "[\"\\u6587\\u672C\"]",
                            Type = "chat"
                        },
                        new
                        {
                            Id = new Guid("f638208e-9d9d-4fc4-9e23-cfeecd010bc3"),
                            Available = true,
                            CompletionRate = 3m,
                            ContextPricingTiers = "[]",
                            CreatedAt = new DateTime(2025, 7, 15, 13, 15, 50, 733, DateTimeKind.Local).AddTicks(3086),
                            DefaultContextLength = 4096,
                            Description = "4.0 超级文本模型",
                            Enable = true,
                            Extension = "{}",
                            Icon = "Spark",
                            IsVersion2 = false,
                            Model = "4.0Ultra",
                            PromptRate = 5m,
                            QuotaMax = "128K",
                            QuotaType = 1,
                            Tags = "[\"\\u6587\\u672C\"]",
                            Type = "chat"
                        },
                        new
                        {
                            Id = new Guid("3cebb604-ff17-47e4-93d1-a25d3a549daa"),
                            Available = true,
                            ContextPricingTiers = "[]",
                            CreatedAt = new DateTime(2025, 7, 15, 13, 15, 50, 733, DateTimeKind.Local).AddTicks(3087),
                            DefaultContextLength = 4096,
                            Description = "ChatGLM Lite 文本模型",
                            Enable = true,
                            Extension = "{}",
                            Icon = "ChatGLM",
                            IsVersion2 = false,
                            Model = "chatglm_lite",
                            PromptRate = 0.1429m,
                            QuotaMax = "128K",
                            QuotaType = 1,
                            Tags = "[\"\\u6587\\u672C\"]",
                            Type = "chat"
                        },
                        new
                        {
                            Id = new Guid("f37cea7e-64c4-4637-aa50-9f653c4a135e"),
                            Available = true,
                            ContextPricingTiers = "[]",
                            CreatedAt = new DateTime(2025, 7, 15, 13, 15, 50, 733, DateTimeKind.Local).AddTicks(3088),
                            DefaultContextLength = 4096,
                            Description = "ChatGLM Pro 文本模型",
                            Enable = true,
                            Extension = "{}",
                            Icon = "ChatGLM",
                            IsVersion2 = false,
                            Model = "chatglm_pro",
                            PromptRate = 0.7143m,
                            QuotaMax = "128K",
                            QuotaType = 1,
                            Tags = "[\"\\u6587\\u672C\"]",
                            Type = "chat"
                        },
                        new
                        {
                            Id = new Guid("eeb1a2db-c215-4ff2-801c-4f60466962d7"),
                            Available = true,
                            ContextPricingTiers = "[]",
                            CreatedAt = new DateTime(2025, 7, 15, 13, 15, 50, 733, DateTimeKind.Local).AddTicks(3088),
                            DefaultContextLength = 4096,
                            Description = "ChatGLM 标准文本模型",
                            Enable = true,
                            Extension = "{}",
                            Icon = "ChatGLM",
                            IsVersion2 = false,
                            Model = "chatglm_std",
                            PromptRate = 0.3572m,
                            QuotaMax = "128K",
                            QuotaType = 1,
                            Tags = "[\"\\u6587\\u672C\"]",
                            Type = "chat"
                        },
                        new
                        {
                            Id = new Guid("cacea79b-2075-4f79-9f52-91d2019dc1ab"),
                            Available = true,
                            ContextPricingTiers = "[]",
                            CreatedAt = new DateTime(2025, 7, 15, 13, 15, 50, 733, DateTimeKind.Local).AddTicks(3089),
                            DefaultContextLength = 4096,
                            Description = "ChatGLM Turbo 文本模型",
                            Enable = true,
                            Extension = "{}",
                            Icon = "ChatGLM",
                            IsVersion2 = false,
                            Model = "chatglm_turbo",
                            PromptRate = 0.3572m,
                            QuotaMax = "128K",
                            QuotaType = 1,
                            Tags = "[\"\\u6587\\u672C\"]",
                            Type = "chat"
                        },
                        new
                        {
                            Id = new Guid("a2422698-8487-4414-88c7-1aa43ad504c8"),
                            Available = true,
                            ContextPricingTiers = "[]",
                            CreatedAt = new DateTime(2025, 7, 15, 13, 15, 50, 733, DateTimeKind.Local).AddTicks(3090),
                            DefaultContextLength = 4096,
                            Description = "Claude 2 文本模型",
                            Enable = true,
                            Extension = "{}",
                            Icon = "Claude",
                            IsVersion2 = false,
                            Model = "claude-2",
                            PromptRate = 7.5m,
                            QuotaMax = "128K",
                            QuotaType = 1,
                            Tags = "[\"\\u6587\\u672C\"]",
                            Type = "chat"
                        },
                        new
                        {
                            Id = new Guid("d5078114-03ca-4f2d-9c33-b2cba046495b"),
                            Available = true,
                            ContextPricingTiers = "[]",
                            CreatedAt = new DateTime(2025, 7, 15, 13, 15, 50, 733, DateTimeKind.Local).AddTicks(3092),
                            DefaultContextLength = 4096,
                            Description = "Claude 2.0 文本模型",
                            Enable = true,
                            Extension = "{}",
                            Icon = "Claude",
                            IsVersion2 = false,
                            Model = "claude-2.0",
                            PromptRate = 7.5m,
                            QuotaMax = "128K",
                            QuotaType = 1,
                            Tags = "[\"\\u6587\\u672C\"]",
                            Type = "chat"
                        },
                        new
                        {
                            Id = new Guid("b58fc508-144e-423a-b075-ec479512a6f6"),
                            Available = true,
                            ContextPricingTiers = "[]",
                            CreatedAt = new DateTime(2025, 7, 15, 13, 15, 50, 733, DateTimeKind.Local).AddTicks(3092),
                            DefaultContextLength = 4096,
                            Description = "Claude 2.1 文本模型",
                            Enable = true,
                            Extension = "{}",
                            Icon = "Claude",
                            IsVersion2 = false,
                            Model = "claude-2.1",
                            PromptRate = 7.5m,
                            QuotaMax = "128K",
                            QuotaType = 1,
                            Tags = "[\"\\u6587\\u672C\"]",
                            Type = "chat"
                        },
                        new
                        {
                            Id = new Guid("8384fee9-3ef1-410c-b8e1-32a43879534f"),
                            Available = true,
                            CompletionRate = 5m,
                            ContextPricingTiers = "[]",
                            CreatedAt = new DateTime(2025, 7, 15, 13, 15, 50, 733, DateTimeKind.Local).AddTicks(3093),
                            DefaultContextLength = 4096,
                            Description = "Claude 3 Haiku 文本模型",
                            Enable = true,
                            Extension = "{}",
                            Icon = "Claude",
                            IsVersion2 = false,
                            Model = "claude-3-haiku",
                            PromptRate = 0.5m,
                            QuotaMax = "128K",
                            QuotaType = 1,
                            Tags = "[\"\\u6587\\u672C\"]",
                            Type = "chat"
                        },
                        new
                        {
                            Id = new Guid("a52764b0-d6d1-46c8-9d9c-50e3366dd6b5"),
                            Available = true,
                            CompletionRate = 5m,
                            ContextPricingTiers = "[]",
                            CreatedAt = new DateTime(2025, 7, 15, 13, 15, 50, 733, DateTimeKind.Local).AddTicks(3094),
                            DefaultContextLength = 4096,
                            Description = "Claude 3 Haiku 20240307 文本模型",
                            Enable = true,
                            Extension = "{}",
                            Icon = "Claude",
                            IsVersion2 = false,
                            Model = "claude-3-haiku-20240307",
                            PromptRate = 0.5m,
                            QuotaMax = "128K",
                            QuotaType = 1,
                            Tags = "[\"\\u6587\\u672C\"]",
                            Type = "chat"
                        },
                        new
                        {
                            Id = new Guid("c492d74e-771d-4cf9-b704-3b0b1102f2b8"),
                            Available = true,
                            CompletionRate = 5m,
                            ContextPricingTiers = "[]",
                            CreatedAt = new DateTime(2025, 7, 15, 13, 15, 50, 733, DateTimeKind.Local).AddTicks(3095),
                            DefaultContextLength = 4096,
                            Description = "Claude 3.5 Sonnet 20240620 文本模型",
                            Enable = true,
                            Extension = "{}",
                            Icon = "Claude",
                            IsVersion2 = false,
                            Model = "claude-3-5-sonnet-20240620",
                            PromptRate = 3m,
                            QuotaMax = "128K",
                            QuotaType = 1,
                            Tags = "[\"\\u6587\\u672C\"]",
                            Type = "chat"
                        },
                        new
                        {
                            Id = new Guid("c65717ca-1b79-4537-a37a-30628fa85cc7"),
                            Available = true,
                            CompletionRate = 5m,
                            ContextPricingTiers = "[]",
                            CreatedAt = new DateTime(2025, 7, 15, 13, 15, 50, 733, DateTimeKind.Local).AddTicks(3096),
                            DefaultContextLength = 4096,
                            Description = "Claude 3 Sonnet 20240229 文本模型",
                            Enable = true,
                            Extension = "{}",
                            Icon = "Claude",
                            IsVersion2 = false,
                            Model = "claude-3-sonnet-20240229",
                            PromptRate = 3m,
                            QuotaMax = "128K",
                            QuotaType = 1,
                            Tags = "[\"\\u6587\\u672C\"]",
                            Type = "chat"
                        },
                        new
                        {
                            Id = new Guid("d5a6a103-352d-4119-abf9-e7ade83fcd83"),
                            Available = true,
                            CompletionRate = 5m,
                            ContextPricingTiers = "[]",
                            CreatedAt = new DateTime(2025, 7, 15, 13, 15, 50, 733, DateTimeKind.Local).AddTicks(3096),
                            DefaultContextLength = 4096,
                            Description = "Claude 3 Opus 20240229 文本模型",
                            Enable = true,
                            Extension = "{}",
                            Icon = "Claude",
                            IsVersion2 = false,
                            Model = "claude-3-opus-20240229",
                            PromptRate = 30m,
                            QuotaMax = "128K",
                            QuotaType = 1,
                            Tags = "[\"\\u6587\\u672C\"]",
                            Type = "chat"
                        },
                        new
                        {
                            Id = new Guid("fc39995b-c95d-439f-9c25-c0bf3dbf5624"),
                            Available = true,
                            ContextPricingTiers = "[]",
                            CreatedAt = new DateTime(2025, 7, 15, 13, 15, 50, 733, DateTimeKind.Local).AddTicks(3097),
                            DefaultContextLength = 4096,
                            Description = "Claude Instant 1 文本模型",
                            Enable = true,
                            Extension = "{}",
                            Icon = "Claude",
                            IsVersion2 = false,
                            Model = "claude-instant-1",
                            PromptRate = 0.815m,
                            QuotaMax = "128K",
                            QuotaType = 1,
                            Tags = "[\"\\u6587\\u672C\"]",
                            Type = "chat"
                        },
                        new
                        {
                            Id = new Guid("4a7da073-f05e-4505-9157-e4070d39f33e"),
                            Available = true,
                            ContextPricingTiers = "[]",
                            CreatedAt = new DateTime(2025, 7, 15, 13, 15, 50, 733, DateTimeKind.Local).AddTicks(3099),
                            DefaultContextLength = 4096,
                            Description = "Claude Instant 1.2 文本模型",
                            Enable = true,
                            Extension = "{}",
                            Icon = "Claude",
                            IsVersion2 = false,
                            Model = "claude-instant-1.2",
                            PromptRate = 0.4m,
                            QuotaMax = "128K",
                            QuotaType = 1,
                            Tags = "[\"\\u6587\\u672C\"]",
                            Type = "chat"
                        },
                        new
                        {
                            Id = new Guid("4cd7185e-cce3-4a95-8283-a5489da952e5"),
                            Available = true,
                            ContextPricingTiers = "[]",
                            CreatedAt = new DateTime(2025, 7, 15, 13, 15, 50, 733, DateTimeKind.Local).AddTicks(3100),
                            DefaultContextLength = 4096,
                            Description = "DALL-E 2 图像生成模型",
                            Enable = true,
                            Extension = "{}",
                            Icon = "OpenAI",
                            IsVersion2 = false,
                            Model = "dall-e-2",
                            PromptRate = 8000m,
                            QuotaType = 2,
                            Tags = "[\"\\u56FE\\u7247\"]",
                            Type = "image"
                        },
                        new
                        {
                            Id = new Guid("69269abf-795a-46cf-b4cf-806c55d67467"),
                            Available = true,
                            ContextPricingTiers = "[]",
                            CreatedAt = new DateTime(2025, 7, 15, 13, 15, 50, 733, DateTimeKind.Local).AddTicks(3101),
                            DefaultContextLength = 4096,
                            Description = "DALL-E 3 图像生成模型",
                            Enable = true,
                            Extension = "{}",
                            Icon = "OpenAI",
                            IsVersion2 = false,
                            Model = "dall-e-3",
                            PromptRate = 20000m,
                            QuotaType = 2,
                            Tags = "[\"\\u56FE\\u7247\"]",
                            Type = "image"
                        },
                        new
                        {
                            Id = new Guid("f6becd86-6c61-4ca6-8204-f14fea60360e"),
                            Available = true,
                            ContextPricingTiers = "[]",
                            CreatedAt = new DateTime(2025, 7, 15, 13, 15, 50, 733, DateTimeKind.Local).AddTicks(3102),
                            DefaultContextLength = 4096,
                            Description = "GPT Image 图片生成模型",
                            Enable = true,
                            Extension = "{}",
                            Icon = "OpenAI",
                            IsVersion2 = false,
                            Model = "gpt-image-1",
                            PromptRate = 50000m,
                            QuotaType = 2,
                            Tags = "[\"\\u56FE\\u7247\"]",
                            Type = "image"
                        },
                        new
                        {
                            Id = new Guid("d9901507-1fb1-4f41-b93c-7c9aa1a1c65e"),
                            Available = true,
                            ContextPricingTiers = "[]",
                            CreatedAt = new DateTime(2025, 7, 15, 13, 15, 50, 733, DateTimeKind.Local).AddTicks(3102),
                            DefaultContextLength = 4096,
                            Description = "Embedding 2 嵌入模型",
                            Enable = true,
                            Extension = "{}",
                            Icon = "OpenAI",
                            IsVersion2 = false,
                            Model = "embedding-2",
                            PromptRate = 0.0355m,
                            QuotaMax = "",
                            QuotaType = 1,
                            Tags = "[\"\\u5D4C\\u5165\\u6A21\\u578B\"]",
                            Type = "embedding"
                        },
                        new
                        {
                            Id = new Guid("61baf3c3-6e52-4164-ac94-8d570c81e38f"),
                            Available = true,
                            ContextPricingTiers = "[]",
                            CreatedAt = new DateTime(2025, 7, 15, 13, 15, 50, 733, DateTimeKind.Local).AddTicks(3103),
                            DefaultContextLength = 4096,
                            Description = "Embedding BERT 512 v1 嵌入模型",
                            Enable = true,
                            Extension = "{}",
                            Icon = "OpenAI",
                            IsVersion2 = false,
                            Model = "embedding-bert-512-v1",
                            PromptRate = 0.1m,
                            QuotaMax = "128K",
                            QuotaType = 1,
                            Tags = "[\"\\u5D4C\\u5165\\u6A21\\u578B\"]",
                            Type = "embedding"
                        },
                        new
                        {
                            Id = new Guid("bb7a697d-88ba-45f2-a8d8-2466f66bd2db"),
                            Available = true,
                            ContextPricingTiers = "[]",
                            CreatedAt = new DateTime(2025, 7, 15, 13, 15, 50, 733, DateTimeKind.Local).AddTicks(3104),
                            DefaultContextLength = 4096,
                            Description = "Embedding S1 v1 嵌入模型",
                            Enable = true,
                            Extension = "{}",
                            IsVersion2 = false,
                            Model = "embedding_s1_v1",
                            PromptRate = 0.1m,
                            QuotaMax = "128K",
                            QuotaType = 1,
                            Tags = "[\"\\u5D4C\\u5165\\u6A21\\u578B\"]",
                            Type = "embedding"
                        },
                        new
                        {
                            Id = new Guid("2aa7910e-bc59-41e8-8833-6d6591dc4516"),
                            Available = true,
                            ContextPricingTiers = "[]",
                            CreatedAt = new DateTime(2025, 7, 15, 13, 15, 50, 733, DateTimeKind.Local).AddTicks(3105),
                            DefaultContextLength = 4096,
                            Description = "GLM 3 Turbo 文本模型",
                            Enable = true,
                            Extension = "{}",
                            Icon = "ChatGLM",
                            IsVersion2 = false,
                            Model = "glm-3-turbo",
                            PromptRate = 0.355m,
                            QuotaMax = "128K",
                            QuotaType = 1,
                            Tags = "[\"\\u6587\\u672C\"]",
                            Type = "chat"
                        },
                        new
                        {
                            Id = new Guid("e222a8a5-b9d8-4257-9fe2-681285410c83"),
                            Available = true,
                            ContextPricingTiers = "[]",
                            CreatedAt = new DateTime(2025, 7, 15, 13, 15, 50, 733, DateTimeKind.Local).AddTicks(3108),
                            DefaultContextLength = 4096,
                            Description = "GLM 4 文本模型",
                            Enable = true,
                            Extension = "{}",
                            Icon = "ChatGLM",
                            IsVersion2 = false,
                            Model = "glm-4",
                            PromptRate = 15m,
                            QuotaMax = "128K",
                            QuotaType = 1,
                            Tags = "[\"\\u6587\\u672C\"]",
                            Type = "chat"
                        },
                        new
                        {
                            Id = new Guid("c3285922-4d1d-4028-b6bf-daead4396249"),
                            Available = true,
                            ContextPricingTiers = "[]",
                            CreatedAt = new DateTime(2025, 7, 15, 13, 15, 50, 733, DateTimeKind.Local).AddTicks(3109),
                            DefaultContextLength = 4096,
                            Description = "GLM 4 全部文本模型",
                            Enable = true,
                            Extension = "{}",
                            Icon = "ChatGLM",
                            IsVersion2 = false,
                            Model = "glm-4-all",
                            PromptRate = 30m,
                            QuotaMax = "128K",
                            QuotaType = 1,
                            Tags = "[\"\\u6587\\u672C\"]",
                            Type = "chat"
                        },
                        new
                        {
                            Id = new Guid("852128d3-af24-46ee-b5cc-691bd86a0a7c"),
                            Available = true,
                            ContextPricingTiers = "[]",
                            CreatedAt = new DateTime(2025, 7, 15, 13, 15, 50, 733, DateTimeKind.Local).AddTicks(3110),
                            DefaultContextLength = 4096,
                            Description = "GLM 4v 文本模型",
                            Enable = true,
                            Extension = "{}",
                            Icon = "ChatGLM",
                            IsVersion2 = false,
                            Model = "glm-4v",
                            PromptRate = 15m,
                            QuotaMax = "128K",
                            QuotaType = 1,
                            Tags = "[\"\\u6587\\u672C\"]",
                            Type = "chat"
                        });
                });

            modelBuilder.Entity("Thor.Service.Domain.ModelMap", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Creator")
                        .HasColumnType("longtext");

                    b.Property<string>("Group")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ModelId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ModelMapItems")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Modifier")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("ModelId");

                    b.ToTable("ModelMaps");
                });

            modelBuilder.Entity("Thor.Service.Domain.Product", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Creator")
                        .HasColumnType("longtext");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Modifier")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(65,30)");

                    b.Property<long>("RemainQuota")
                        .HasColumnType("bigint");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Thor.Service.Domain.ProductPurchaseRecord", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Creator")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Modifier")
                        .HasColumnType("longtext");

                    b.Property<string>("ProductId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("PurchaseTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<long>("RemainQuota")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("Creator");

                    b.HasIndex("UserId");

                    b.ToTable("ProductPurchaseRecords");
                });

            modelBuilder.Entity("Thor.Service.Domain.RateLimitModel", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("BlackList")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Creator")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("Enable")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("Limit")
                        .HasColumnType("int");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Modifier")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Strategy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.Property<string>("WhiteList")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("Creator");

                    b.HasIndex("Model");

                    b.ToTable("RateLimitModels");
                });

            modelBuilder.Entity("Thor.Service.Domain.RedeemCode", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Creator")
                        .HasColumnType("longtext");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Modifier")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<long>("Quota")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("RedeemedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("RedeemedUserId")
                        .HasColumnType("longtext");

                    b.Property<string>("RedeemedUserName")
                        .HasColumnType("longtext");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("Code");

                    b.ToTable("RedeemCodes");
                });

            modelBuilder.Entity("Thor.Service.Domain.Setting", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("Private")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Key");

                    b.ToTable("Settings");

                    b.HasData(
                        new
                        {
                            Key = "Setting:GeneralSetting:RechargeAddress",
                            Description = "充值地址",
                            Private = false,
                            Value = ""
                        },
                        new
                        {
                            Key = "Setting:GeneralSetting:ChatLink",
                            Description = "对话链接",
                            Private = false,
                            Value = ""
                        },
                        new
                        {
                            Key = "Setting:GeneralSetting:VidolLink",
                            Description = "Vidol 链接",
                            Private = false,
                            Value = ""
                        },
                        new
                        {
                            Key = "Setting:GeneralSetting:NewUserQuota",
                            Description = "新用户初始额度",
                            Private = true,
                            Value = "100000"
                        },
                        new
                        {
                            Key = "Setting:GeneralSetting:RequestQuota",
                            Description = "请求预扣额度",
                            Private = true,
                            Value = "2000"
                        },
                        new
                        {
                            Key = "Setting:GeneralSetting:InviteQuota",
                            Description = "邀请奖励额度",
                            Private = true,
                            Value = "100000"
                        },
                        new
                        {
                            Key = "Setting:GeneralSetting:EnableClearLog",
                            Description = "启用定时清理日志",
                            Private = true,
                            Value = "true"
                        },
                        new
                        {
                            Key = "Setting:GeneralSetting:IntervalDays",
                            Description = "间隔天数",
                            Private = true,
                            Value = "90"
                        },
                        new
                        {
                            Key = "Setting:GeneralSetting:EnableAutoCheckChannel",
                            Description = "启用自动检测渠道策略",
                            Private = true,
                            Value = "false"
                        },
                        new
                        {
                            Key = "Setting:GeneralSetting:CheckInterval",
                            Description = "检测间隔 (分钟)",
                            Private = true,
                            Value = "60"
                        },
                        new
                        {
                            Key = "Setting:GeneralSetting:AutoDisableChannel",
                            Description = "自动禁用异常渠道",
                            Private = true,
                            Value = "false"
                        },
                        new
                        {
                            Key = "Setting:GeneralSetting:AlipayNotifyUrl",
                            Description = "支付宝支付回调地址",
                            Private = false,
                            Value = "https://您的服务器地址/"
                        },
                        new
                        {
                            Key = "Setting:GeneralSetting:AlipayAppId",
                            Description = "支付宝应用APPID",
                            Private = true,
                            Value = ""
                        },
                        new
                        {
                            Key = "Setting:GeneralSetting:AlipayPrivateKey",
                            Description = "支付宝应用私钥",
                            Private = true,
                            Value = ""
                        },
                        new
                        {
                            Key = "Setting:GeneralSetting:AlipayPublicKey",
                            Description = "支付宝公钥",
                            Private = true,
                            Value = ""
                        },
                        new
                        {
                            Key = "Setting:GeneralSetting:AlipayAppCertPath",
                            Description = "支付宝AppCertPath",
                            Private = true,
                            Value = ""
                        },
                        new
                        {
                            Key = "Setting:GeneralSetting:AlipayRootCertPath",
                            Description = "支付宝AlipayRootCertPath",
                            Private = true,
                            Value = ""
                        },
                        new
                        {
                            Key = "Setting:GeneralSetting:AlipayPublicCertPath",
                            Description = "支付宝公钥证书路径",
                            Private = true,
                            Value = ""
                        },
                        new
                        {
                            Key = "Setting:SystemSetting:ServerAddress",
                            Description = "服务器地址",
                            Private = false,
                            Value = ""
                        },
                        new
                        {
                            Key = "Setting:SystemSetting:EnableRegister",
                            Description = "启用账号注册",
                            Private = false,
                            Value = "true"
                        },
                        new
                        {
                            Key = "Setting:SystemSetting:EnableGithubLogin",
                            Description = "允许Github登录",
                            Private = false,
                            Value = "true"
                        },
                        new
                        {
                            Key = "Setting:SystemSetting:GithubClientId",
                            Description = "Github Client Id",
                            Private = false,
                            Value = ""
                        },
                        new
                        {
                            Key = "Setting:SystemSetting:GithubClientSecret",
                            Description = "Github Client Secret",
                            Private = true,
                            Value = ""
                        },
                        new
                        {
                            Key = "Setting:SystemSetting:EnableGiteeLogin",
                            Description = "允许Gitee登录",
                            Private = false,
                            Value = "true"
                        },
                        new
                        {
                            Key = "Setting:SystemSetting:GiteeClientId",
                            Description = "Gitee Client Id",
                            Private = false,
                            Value = ""
                        },
                        new
                        {
                            Key = "Setting:SystemSetting:GiteeClientSecret",
                            Description = "Gitee Client Secret",
                            Private = true,
                            Value = ""
                        },
                        new
                        {
                            Key = "Setting:SystemSetting:GiteeRedirectUri",
                            Description = "Gitee redirect_uri",
                            Private = false,
                            Value = ""
                        },
                        new
                        {
                            Key = "Setting:SystemSetting:EmailAddress",
                            Description = "邮箱地址",
                            Private = true,
                            Value = ""
                        },
                        new
                        {
                            Key = "Setting:SystemSetting:EmailPassword",
                            Description = "邮箱密码",
                            Private = true,
                            Value = ""
                        },
                        new
                        {
                            Key = "Setting:SystemSetting:SmtpAddress",
                            Description = "SMTP地址",
                            Private = true,
                            Value = ""
                        },
                        new
                        {
                            Key = "Setting:SystemSetting:EnableEmailRegister",
                            Description = "启用邮箱验证注册",
                            Private = false,
                            Value = "false"
                        },
                        new
                        {
                            Key = "Setting:SystemSetting:EnableCasdoorAuth",
                            Description = "启用Casdoor 授权",
                            Private = true,
                            Value = "false"
                        },
                        new
                        {
                            Key = "Setting:SystemSetting:CasdoorEndipoint",
                            Description = "Casdoor 自定义端点",
                            Private = true,
                            Value = ""
                        },
                        new
                        {
                            Key = "Setting:SystemSetting:CasdoorClientId",
                            Description = "Casdoor Client Id",
                            Private = true,
                            Value = ""
                        },
                        new
                        {
                            Key = "Setting:SystemSetting:CasdoorClientSecret",
                            Description = "Casdoor Client Secret",
                            Private = false,
                            Value = ""
                        },
                        new
                        {
                            Key = "Setting:OtherSetting:WebTitle",
                            Description = "网站标题",
                            Private = false,
                            Value = "AIDtoNet API"
                        },
                        new
                        {
                            Key = "Setting:OtherSetting:WebLogo",
                            Description = "网站Logo地址",
                            Private = false,
                            Value = "/logo.png"
                        },
                        new
                        {
                            Key = "Setting:OtherSetting:IndexContent",
                            Description = "首页内容",
                            Private = false,
                            Value = "AI DotNet API 提供更强的兼容，将更多的AI平台接入到AI DotNet API中，让AI集成更加简单。"
                        });
                });

            modelBuilder.Entity("Thor.Service.Domain.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Avatar")
                        .HasColumnType("longtext");

                    b.Property<long>("ConsumeToken")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Creator")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Groups")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDisabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Modifier")
                        .HasColumnType("longtext");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PasswordHas")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<long>("RequestCount")
                        .HasColumnType("bigint");

                    b.Property<long>("ResidualCredit")
                        .HasColumnType("bigint");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = "CA378C74-19E7-458A-918B-4DBB7AE1729D",
                            ConsumeToken = 0L,
                            CreatedAt = new DateTime(2025, 7, 15, 13, 15, 50, 684, DateTimeKind.Local).AddTicks(7105),
                            Email = "239573049@qq.com",
                            Groups = "[\"default\",\"vip\"]",
                            IsDelete = false,
                            IsDisabled = false,
                            Password = "bc06c1e1640d914f1ec3a40f2bdd278c",
                            PasswordHas = "990b8a11d7a94a96a4957ca827b7452a",
                            RequestCount = 0L,
                            ResidualCredit = 1000000000L,
                            Role = "admin",
                            UserName = "admin"
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
